plugins {
    id 'java'
    id "org.web3j"
    id "org.web3j.solidity"
    id "com.github.node-gradle.node"
}

node {
    nodeProjectDir = file("../")
}

solidity {
    pathRemappings = ['@openzeppelin/': '../node_modules/@openzeppelin/']
}

sourceSets {
    common__common__src__main__java__net__consensys__gpact__common__soliditywrappers {
        solidity {
            srcDir {
                "./common/src/main"
            }
            outputDir = file('./build/resources/common/src/main')
        }
    }
    common__common__src__test__java__net__consensys__gpact__common__soliditywrappers {
        solidity {
            srcDir {
                "./common/src/test"
            }
            outputDir = file('./build/resources/common/src/test')
        }
    }
    functioncall__gpact__src__main__java__net__consensys__gpact__cbc__soliditywrappers {
        solidity {
            srcDir {
                "./functioncall/gpact/src/main"
            }
            outputDir = file("./build/resources/functioncall/gpact/src/main")
        }
    }
    functioncall__gpact__src__test__java__net__consensys__gpact__cbc__calltree__soliditywrappers {
        solidity {
            srcDir {
                "./functioncall/gpact/src/test"
            }
            outputDir = file("./build/resources/functioncall/gpact/src/test")
        }
    }
    functioncall__interface__src__main__java__net__consensys__gpact__functioninterfaces__soliditywrappers {
        solidity {
            srcDir {
                "./functioncall/interface/src/main"
            }
            outputDir = file("./build/resources/functioncall/interface/src/main")
        }
    }
    functioncall__interface__src__test__java__net__consensys__gpact__functioninterfaces__soliditywrappers {
        solidity {
            srcDir {
                "./functioncall/interface/src/test"
            }
            outputDir = file("./build/resources/functioncall/interface/src/test")
        }
    }
    functioncall__sfc__src__main__java__net__consensys__gpact__sfccbc__soliditywrappers {
        solidity {
            srcDir {
                "./functioncall/sfc/src/main"
            }
            outputDir = file("./build/resources/functioncall/sfc/src/main")
        }
    }
    messaging__attestor_sign__src__main__java__net__consensys__gpact__attestorsign__soliditywrappers {
        solidity {
            srcDir {
                "./messaging/attestor-sign/src/main"
            }
            outputDir = file('./build/resources/messaging/attestor-sign/src/main')
        }
    }
    messaging__interface__src__main__java__net__consensys__gpact__messaging__soliditywrappers {
        solidity {
            srcDir {
                "./messaging/interface/src/main"
            }
            outputDir = file('./build/resources/messaging/interface/src/main')
        }
    }
    messaging__txroot_transfer__src__main__java__net__consensys__gpact__txroot__soliditywrappers {
        solidity {
            srcDir {
                "./messaging/txroot-transfer/src/main"
            }
            outputDir = file('./build/resources/messaging/txroot-transfer/src/main')
        }
    }
    messaging__txroot_transfer__src__test__java__net__consensys__gpact__txroot__soliditywrappers {
        solidity {
            srcDir {
                "./messaging/txroot-transfer/src/test"
            }
            outputDir = file('./build/resources/messaging/txroot-transfer/src/test')
        }
    }
    application__atomic_appcontracts__erc20__src__main__java__net__consensys__gpact__appcontracts__atomic__erc20__soliditywrappers {
        solidity {
            srcDir {
                "./application/atomic-appcontracts/erc20/src/main"
            }
            outputDir = file('./build/resources/application/atomic-appcontracts/erc20/src/main')
        }
    }
    application__atomic_appcontracts__erc20__src__test__java__net__consensys__gpact__appcontracts__atomic__erc20__soliditywrappers {
        solidity {
            srcDir {
                "./application/atomic-appcontracts/erc20/src/test"
            }
            outputDir = file('./build/resources/application/atomic-appcontracts/erc20/src/test')
        }
    }
    application__atomic_appcontracts__lockablestorage__src__main__java__net__consensys__gpact__lockablestorage__soliditywrappers {
        solidity {
            srcDir {
                "./application/atomic-appcontracts/lockablestorage/src/main"
            }
            outputDir = file('./build/resources/application/atomic-appcontracts/lockablestorage/src/main')
        }
    }
    application__atomic_appcontracts__lockablestorage__src__test__java__net__consensys__gpact__lockablestorage__soliditywrappers {
        solidity {
            srcDir {
                "./application/atomic-appcontracts/lockablestorage/src/test"
            }
            outputDir = file('./build/resources/application/atomic-appcontracts/lockablestorage/src/test')
        }
    }
    application__gpact_examples__conditional__src__main__java__net__consensys__gpact__examples__conditional__soliditywrappers {
        solidity {
            srcDir {
                "./application/gpact-examples/conditional/src/main"
            }
            outputDir = file('./build/resources/application/gpact-examples/conditional/src/main')
        }
    }
    application__gpact_examples__hotel_train__src__main__java__net__consensys__gpact__examples__hoteltrain__soliditywrappers {
        solidity {
            srcDir {
                "./application/gpact-examples/hotel-train/src/main"
            }
            outputDir = file('./build/resources/application/gpact-examples/hotel-train/src/main')
        }
    }
    application__gpact_examples__read__src__main__java__net__consensys__gpact__examples__read__soliditywrappers {
        solidity {
            srcDir {
                "./application/gpact-examples/read/src/main"
            }
            outputDir = file('./build/resources/application/gpact-examples/read/src/main')
        }
    }
    application__gpact_examples__trade__src__main__java__net__consensys__gpact__examples__trade__soliditywrappers {
        solidity {
            srcDir {
                "./application/gpact-examples/trade/src/main"
            }
            outputDir = file('./build/resources/application/gpact-examples/trade/src/main')
        }
    }
    application__gpact_examples__write__src__main__java__net__consensys__gpact__examples__write__soliditywrappers {
        solidity {
            srcDir {
                "./application/gpact-examples/write/src/main"
            }
            outputDir = file('./build/resources/application/gpact-examples/write/src/main')
        }
    }
    application__nonatomic_appcontracts__erc20bridge__src__main__java__net__consensys__gpact__nonatomic__appcontracts__erc20bridge__soliditywrappers {
        solidity {
            srcDir {
                "./application/nonatomic-appcontracts/erc20bridge/src/main"
            }
            outputDir = file('./build/resources/application/nonatomic-appcontracts/erc20bridge/src/main')
        }
    }
    application__nonatomic_appcontracts__erc721bridge__src__main__java__net__consensys__gpact__appcontracts__nonatomic__erc721bridge__soliditywrappers {
        solidity {
            srcDir {
                "./application/nonatomic-appcontracts/erc721bridge/src/main"
            }
            outputDir = file('./build/resources/application/nonatomic-appcontracts/erc721bridge/src/main')
        }
    }
    application__sfc_examples__write__src__main__java__net__consensys__gpact__sfc__examples__write__soliditywrappers {
        solidity {
            srcDir {
                "./application/sfc-examples/write/src/main"
            }
            outputDir = file('./build/resources/application/sfc-examples/write/src/main')
        }
    }
}

project.tasks.matching {
    task -> task.name.endsWith('Solidity') && task.name.startsWith('compile')
}.configureEach {task ->
    task.doLast {
        def src = project.buildDir.toString() + "/generated/sources/web3j:" + task.name.split('compile')[1].split('Solidity')[0].toLowerCase() + ":java"
        def command = "rm -rf " + src
        def res = command.execute()
        res.waitForProcessOutput(System.out, System.err)
        if (res.exitValue() != 0) {
            throw new GradleException("Solidity compile error")
        }
    }
}

project.tasks.matching {
    task -> task.name.endsWith('ContractWrappers')
}.configureEach {task -> 
    task.doFirst {
        def pkg = task.name.split('java__')[1].split('ContractWrappers')[0].replace("__", ".")
        task.setProperty('generatedJavaPackageName', pkg)
    }
    task.doLast {
        def src = project.buildDir.toString() + "/generated/sources/web3j:" + task.name.split('generate')[1].split('ContractWrappers')[0].toLowerCase() + ":java/" + task.name.split('java__')[1].split('ContractWrappers')[0].replace("__", "/")
        def dest = project.rootDir.toString() + "/" + task.name.split('generate')[1].split('ContractWrappers')[0].toLowerCase().replace('__', '/').replace('_', '-')
        println src
        println dest
        def command = "cp -r " + src + "/ " + dest + "/"
        println command
        def res = command.execute()
        res.waitForProcessOutput(System.out, System.err)
        if (res.exitValue() != 0) {
            throw new GradleException("Solidity compile error")
        }
    }
}

build.finalizedBy project.tasks.matching {
    task -> task.group == 'web3j' && task.name != 'generateContractWrappers' && task.name != 'generateTestContractWrappers'
}
