package net.consensys.gpact.cbc.soliditywrappers;

import java.math.BigInteger;
import java.util.Arrays;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.5-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CrosschainVerifierSign extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50604051610f16380380610f1683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610e83806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634c1ce90214610030575b600080fd5b61004361003e366004610bdd565b610045565b005b606080606080600061009461008f88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061052d92505050565b61057c565b905060006100bb826000815181106100ae576100ae610e21565b602002602001015161057c565b80519091508067ffffffffffffffff8111156100d9576100d9610e37565b604051908082528060200260200182016040528015610102578160200160208202803683370190505b509650600061011d846001815181106100ae576100ae610e21565b90508167ffffffffffffffff81111561013857610138610e37565b604051908082528060200260200182016040528015610161578160200160208202803683370190505b509650600061017c856002815181106100ae576100ae610e21565b90508267ffffffffffffffff81111561019757610197610e37565b6040519080825280602002602001820160405280156101c0578160200160208202803683370190505b50965060006101db866003815181106100ae576100ae610e21565b90508367ffffffffffffffff8111156101f6576101f6610e37565b60405190808252806020026020018201604052801561021f578160200160208202803683370190505b509650885184146102895760405162461bcd60e51b815260206004820152602960248201527f4c656e677468206f66207369675220616e64207369676e65727320646f6573206044820152680dcdee840dac2e8c6d60bb1b60648201526084015b60405180910390fd5b875184146102eb5760405162461bcd60e51b815260206004820152602960248201527f4c656e677468206f66207369675320616e64207369676e65727320646f6573206044820152680dcdee840dac2e8c6d60bb1b6064820152608401610280565b8651841461034d5760405162461bcd60e51b815260206004820152602960248201527f4c656e677468206f66207369675620616e64207369676e65727320646f6573206044820152680dcdee840dac2e8c6d60bb1b6064820152608401610280565b60005b8481101561047e5761038461037d87838151811061037057610370610e21565b602002602001015161065d565b6014015190565b8b828151811061039657610396610e21565b60200260200101906001600160a01b031690816001600160a01b0316815250506103d56103ce85838151811061037057610370610e21565b60006106da565b8a82815181106103e7576103e7610e21565b60200260200101818152505061040b6103ce84838151811061037057610370610e21565b89828151811061041d5761041d610e21565b60200260200101818152505061044861044183838151811061037057610370610e21565b600061073f565b88828151811061045a5761045a610e21565b60ff909216602092830291909101909101528061047681610df0565b915050610350565b5050505050505060008054906101000a90046001600160a01b03166001600160a01b031663ea13ec8b8b868686868e8e6040518863ffffffff1660e01b81526004016104d09796959493929190610cf7565b60206040518083038186803b1580156104e857600080fd5b505afa1580156104fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105209190610bb4565b5050505050505050505050565b60408051808201909152600080825260208201528151806105635750506040805180820190915260008082526020820152919050565b6040805180820190915260209384018152928301525090565b6060610587826107a5565b61059057600080fd5b600061059b836107cc565b90508067ffffffffffffffff8111156105b6576105b6610e37565b6040519080825280602002602001820160405280156105fb57816020015b60408051808201909152600080825260208201528152602001906001900390816105d45790505b50915060006106098461085e565b905060005b610617826108b9565b1561065557610625826108dd565b84828151811061063757610637610e21565b6020026020010181905250808061064d90610df0565b91505061060e565b505050919050565b606061066882610937565b61067157600080fd5b60008061067d8461095d565b90925090508067ffffffffffffffff81111561069b5761069b610e37565b6040519080825280601f01601f1916602001820160405280156106c5576020820181803683370190505b5092506106d3828483610a01565b5050919050565b60008060005b6020811015610737576106f4816008610dba565b856106ff8387610da2565b8151811061070f5761070f610e21565b01602001516001600160f81b031916901c91909117908061072f81610df0565b9150506106e0565b509392505050565b600061074c826001610da2565b8351101561079c5760405162461bcd60e51b815260206004820152601c60248201527f736c6963696e67206f7574206f662072616e6765202875696e743829000000006044820152606401610280565b50016001015190565b60008160200151600014156107bc57506000919050565b50515160c060009190911a101590565b60006107d7826107a5565b6107e357506000919050565b81518051600090811a91906107f785610a3f565b6108019083610da2565b9050600060018660200151846108179190610da2565b6108219190610dd9565b905060005b8183116108545761083683610acd565b6108409084610da2565b92508061084c81610df0565b915050610826565b9695505050505050565b604080516080810182526000918101828152606082018390528152602081019190915261088a826107a5565b61089357600080fd5b600061089e83610a3f565b83516108aa9190610da2565b92825250602081019190915290565b805160208101518151600092916108cf91610da2565b836020015110915050919050565b60408051808201909152600080825260208201526108fa826108b9565b1561002b576020820151600061090f82610acd565b8284526020840181905290506109258183610da2565b6020850152506109329050565b919050565b600081602001516000141561094e57506000919050565b50515160c060009190911a1090565b60008061096983610937565b61097257600080fd5b8251805160001a90608082101561098e57946001945092505050565b60b88210156109bc57600185602001516109a89190610dd9565b92506109b5816001610da2565b93506109fa565b602085015160b61983019081906109d590600190610dd9565b6109df9190610dd9565b93506109eb8183610da2565b6109f6906001610da2565b9450505b5050915091565b6020601f820104836020840160005b83811015610a2c57602081028381015190830152600101610a10565b5050505060008251602001830152505050565b6000816020015160001415610a5657506000919050565b8151805160001a906080821015610a71575060009392505050565b60b8821080610a8c575060c08210158015610a8c575060f882105b15610a9b575060019392505050565b60c0821015610ac257610aaf60b783610dd9565b610aba906001610da2565b949350505050565b610aaf60f783610dd9565b8051600090811a6080811015610ae65760019150610b65565b60b8811015610b0c57610afa608082610dd9565b610b05906001610da2565b9150610b65565b60c0811015610b3557600183015160b76020839003016101000a9004810160b519019150610b65565b60f8811015610b4957610afa60c082610dd9565b600183015160f76020839003016101000a9004810160f5190191505b50919050565b60008083601f840112610b7d57600080fd5b50813567ffffffffffffffff811115610b9557600080fd5b602083019150836020828501011115610bad57600080fd5b9250929050565b600060208284031215610bc657600080fd5b81518015158114610bd657600080fd5b9392505050565b60008060008060008060808789031215610bf657600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610c1c57600080fd5b610c288a838b01610b6b565b90965094506060890135915080821115610c4157600080fd5b50610c4e89828a01610b6b565b979a9699509497509295939492505050565b600081518084526020808501945080840160005b83811015610c9057815187529582019590820190600101610c74565b509495945050505050565b600081518084526020808501945080840160005b83811015610c9057815160ff1687529582019590820190600101610caf565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060c08201898352602060c081850152818a5180845260e086019150828c01935060005b81811015610d415784516001600160a01b031683529383019391830191600101610d1c565b50508481036040860152610d55818b610c60565b925050508281036060840152610d6b8188610c60565b90508281036080840152610d7f8187610c9b565b905082810360a0840152610d94818587610cce565b9a9950505050505050505050565b60008219821115610db557610db5610e0b565b500190565b6000816000190483118215151615610dd457610dd4610e0b565b500290565b600082821015610deb57610deb610e0b565b500390565b6000600019821415610e0457610e04610e0b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212205724c4c6a932cea72a5bf81d0fc54f219243b0350ca674986c40929ec108073764736f6c63430008050033";

    public static final String FUNC_DECODEANDVERIFYEVENT = "decodeAndVerifyEvent";

    @Deprecated
    protected CrosschainVerifierSign(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrosschainVerifierSign(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrosschainVerifierSign(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrosschainVerifierSign(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    @Deprecated
    public static CrosschainVerifierSign load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainVerifierSign(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrosschainVerifierSign load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainVerifierSign(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrosschainVerifierSign load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrosschainVerifierSign(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrosschainVerifierSign load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrosschainVerifierSign(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrosschainVerifierSign> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainVerifierSign.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CrosschainVerifierSign> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainVerifierSign.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainVerifierSign> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainVerifierSign.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainVerifierSign> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainVerifierSign.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
