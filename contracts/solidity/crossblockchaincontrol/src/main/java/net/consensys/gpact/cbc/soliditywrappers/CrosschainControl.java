package net.consensys.gpact.cbc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.5-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CrosschainControl extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620034853803806200348583398101604081905262000034916200003d565b60015562000057565b6000602082840312156200005057600080fd5b5051919050565b61341e80620000676000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638e22d534116100a2578063b283209611610071578063b28320961461021b578063b4c3b75614610257578063c318d3cc14610260578063df1bba0114610273578063f830b7b41461028657600080fd5b80638e22d534146101b65780638eaf89d8146101c957806392b2c335146101f5578063b0ac497d1461020857600080fd5b8063439160df116100de578063439160df1461015d5780635c27d307146101665780637bf37a091461017b578063877ba01d1461018357600080fd5b8063260c1d75146101105780632af6cdf0146101255780633193c08b1461014157806339ce107e1461014a575b600080fd5b61012361011e366004612d65565b6102a6565b005b61012e60045481565b6040519081526020015b60405180910390f35b61012e60055481565b610123610158366004612ca8565b6102df565b61012e60015481565b61016e61038d565b60405161013891906130a9565b60055461012e565b6101a6610191366004612e28565b60036020526000908152604090205460ff1681565b6040519015158152602001610138565b61012e6101c4366004612f65565b61041b565b6101d161045a565b6040805193845260208401929092526001600160a01b031690820152606001610138565b610123610203366004612f65565b61050d565b610123610216366004612ccc565b6105dd565b610123610229366004612f35565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b600554156101a6565b61012361026e366004612ccc565b610a92565b610123610281366004612fc0565b610ac7565b61012e610294366004612e28565b60026020526000908152604090205481565b60006060806102bb8b8b8b8b8b8b6001610bd9565b92955093509091506102d29050838383888861106c565b5050505050505050505050565b60005b600a5481101561033a57816001600160a01b0316600a8281548110610309576103096133a7565b6000918252602090912001546001600160a01b03161415610328575050565b8061033281613376565b9150506102e2565b50600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0392909216919091179055565b6006805461039a90613341565b80601f01602080910402602001604051908101604052809291908181526020018280546103c690613341565b80156104135780601f106103e857610100808354040283529160200191610413565b820191906000526020600020905b8154815290600101906020018083116103f657829003601f168201915b505050505081565b600080606061042c87878787611347565b9092509050811561044257600092505050610452565b61044d81600061177e565b925050505b949350505050565b6000806000806104686117ea565b90506104fe6006805461047a90613341565b80601f01602080910402602001604051908101604052809291908181526020018280546104a690613341565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b505050505082611a12565b50600454969195509350915050565b6000606061051d86868686611347565b9092509050816105d5576105408160405180602001604052806000815250611b74565b6105d5577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516105bf9060208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b60405180910390a1600b805460ff191660011790555b505050505050565b6000806060806105f38a8a8a8a8a8a6001610bd9565b929650909450925090503233146106625760405162461bcd60e51b815260206004820152602860248201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626044820152677920616e20454f4160c01b60648201526084015b60405180910390fd5b83600154146106b35760405162461bcd60e51b815260206004820152601f60248201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e006044820152606401610659565b600154600455306001600160a01b038416146107275760405162461bcd60e51b815260206004820152602d60248201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360448201526c206e6f742074686973206f6e6560981b6064820152608401610659565b600061073483600061177e565b600081815260026020526040902054909150806107855760405162461bcd60e51b815260206004820152600f60248201526e43616c6c206e6f742061637469766560881b6044820152606401610659565b60018114156107cd5760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e6465642028737563636573732960601b6044820152606401610659565b60028114156108155760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e64656420286661696c7572652960601b6044820152606401610659565b804211156108395761082682611b9f565b61082e611bee565b5050505050506105d5565b60408401516001600160a01b03811632146108965760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e7400006044820152606401610659565b60006108a386608061177e565b905060006108b38760a084611c3d565b80519091506108c9906006906020840190612a0c565b50805160208201206040805160018082528183019092526000918160200160208202803683375050815191925061090891600791506020840190612a90565b506109158882848a611cfb565b1561092a5750505050505050505050506105d5565b6040805160208082018e90528183018a905282518083038401815260609092019092528051910120600581905560006109638584611fa2565b50905060005b600a54811015610a0e576000600a8281548110610988576109886133a7565b60009182526020909120015460405163267ad75360e21b81528415156004820152602481018690526001600160a01b03909116915081906399eb5d4c90604401600060405180830381600087803b1580156109e257600080fd5b505af11580156109f6573d6000803e3d6000fd5b50505050508080610a0690613376565b915050610969565b5080610a1b576002610a1e565b60015b60008a8152600260205260409081902091909155517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80790610a6d908b9084909182521515602082015260400190565b60405180910390a1610a7d611bee565b50505050505050505050505050505050505050565b6000606080610aa78989898989896000610bd9565b9295509350909150610abc905083838361214a565b505050505050505050565b323314610b165760405162461bcd60e51b815260206004820181905260248201527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f416044820152606401610659565b60008481526002602052604090205415610b725760405162461bcd60e51b815260206004820152601e60248201527f5472616e73616374696f6e20616c7265616479207265676973746572656400006044820152606401610659565b6000610b7e42856132c3565b60008681526002602052604090819020829055519091507f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b066142490610bca9087903390859088908890613105565b60405180910390a15050505050565b6000806060808780610c2d5760405162461bcd60e51b815260206004820152601a60248201527f4d757374206265206174206c65617374206f6e65206576656e740000000000006044820152606401610659565b808b14610c935760405162461bcd60e51b815260206004820152602e60248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642065766560448201526d0dce8e640daeae6e840dac2e8c6d60931b6064820152608401610659565b80871480610c9f575086155b610d255760405162461bcd60e51b815260206004820152604b60248201527f4e756d626572206f66206576656e747320616e64207369676e6174757265732060448201527f6d617463682c206f72206e756d626572206f66207369676e617475726573206d60648201526a757374206265207a65726f60a81b608482015260a401610659565b610d306001826132fa565b6001600160401b03811115610d4757610d476133bd565b604051908082528060200260200182016040528015610d7a57816020015b6060815260200190600190039081610d655790505b50915060005b818110156110405760008d8d83818110610d9c57610d9c6133a7565b90506020020135905060008c8c84818110610db957610db96133a7565b9050602002810190610dcb919061327d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935060609250508b159050610e68578b8b85818110610e1e57610e1e6133a7565b9050602002810190610e30919061327d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b6000838152602081905260409020546001600160a01b031680610edb5760405162461bcd60e51b815260206004820152602560248201527f4e6f207265676973746572656420766572696669657220666f7220626c6f636b60448201526431b430b4b760d91b6064820152608401610659565b600085610f36578b610f0d577fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807610f2f565b7f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614245b9050610f59565b507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f5b60405163260e748160e11b81526000906001600160a01b03841690634c1ce90290610f8e90899086908a908a906004016131f2565b60006040518083038186803b158015610fa657600080fd5b505afa158015610fba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fe29190810190612e89565b905086610ffa5780516020820151909b509950611027565b60208101518961100b60018a6132fa565b8151811061101b5761101b6133a7565b60200260200101819052505b505050505050808061103890613376565b915050610d80565b508b8b6000818110611054576110546133a7565b90506020020135945050975097509750979350505050565b3233146110c65760405162461bcd60e51b815260206004820152602260248201527f5365676d656e74206d7573742062652063616c6c65642066726f6d20616e20456044820152614f4160f01b6064820152608401610659565b60006110d385600061177e565b60408601519091506001600160a01b03811632146111335760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e7400006044820152606401610659565b600061114087608061177e565b905060008884878760405160200161115b949392919061306b565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff16156111df5760405162461bcd60e51b8152602060048201526024808201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636044820152631d5d195960e21b6064820152608401610659565b600081815260036020526111f58960a085611c3d565b805190915061120b906006906020840190612a0c565b508051602082012060048b905561122460078989612aca565b50611266898989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692508b9150611cfb9050565b1561127657505050505050611340565b6040805160208082018e905281830189905282518083038401815260609092019092528051910120600581905550600060606112e5848b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611fa292505050565b60405191935091507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f90611327908a9086908e908e90600a908990899061313e565b60405180910390a1611337611bee565b50505050505050505b5050505050565b6008546009546000916060911061139557600b805460ff191660011790556009805490600061137583613376565b919050555060016040518060200160405280600081525091509150611775565b6007546113f25760405162461bcd60e51b815260206004820152602560248201527f4163746976652043616c6c732063616c6c2070617468206c656e677468206973604482015264207a65726f60d81b6064820152608401610659565b6007546000906001600160401b0381111561140f5761140f6133bd565b604051908082528060200260200182016040528015611438578160200160208202803683370190505b50905060005b60075461144d906001906132fa565b8110156114a15760078181548110611467576114676133a7565b9060005260206000200154828281518110611484576114846133a7565b60209081029190910101528061149981613376565b91505061143e565b506009546114b09060016132c3565b81600183516114bf91906132fa565b815181106114cf576114cf6133a7565b6020026020010181815250506000806000611574600680546114f090613341565b80601f016020809104026020016040519081016040528092919081815260200182805461151c90613341565b80156115695780601f1061153e57610100808354040283529160200191611569565b820191906000526020600020905b81548152906001019060200180831161154c57829003601f168201915b505050505085611a12565b925092509250828a14158061159b5750816001600160a01b0316896001600160a01b031614155b806115e457506115e288888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611b74915050565b155b1561166d57600b805460ff191660011790556009805490600061160683613376565b91905055507f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15838b848c858d8d6040516116469796959493929190613223565b60405180910390a16001604051806020016040528060008152509550955050505050611775565b60098054600091600891908361168283613376565b9190505581548110611696576116966133a7565b9060005260206000200180546116ab90613341565b80601f01602080910402602001604051908101604052809291908181526020018280546116d790613341565b80156117245780601f106116f957610100808354040283529160200191611724565b820191906000526020600020905b81548152906001019060200180831161170757829003601f168201915b505050505090507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b856040516117629594939291906130bc565b60405180910390a1600096509450505050505b94509492505050565b600061178b8260206132c3565b835110156117db5760405162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e743235362900006044820152606401610659565b50818101602001515b92915050565b600754606090819060018114801561182057506007600081548110611811576118116133a7565b90600052602060002001546000145b1561182b5750919050565b60076118386001836132fa565b81548110611848576118486133a7565b906000526020600020015460001461193057806001600160401b03811115611872576118726133bd565b60405190808252806020026020018201604052801561189b578160200160208202803683370190505b50915060005b6118ac6001836132fa565b81101561190057600781815481106118c6576118c66133a7565b90600052602060002001548382815181106118e3576118e36133a7565b6020908102919091010152806118f881613376565b9150506118a1565b5060008261190f6001846132fa565b8151811061191f5761191f6133a7565b602002602001018181525050611a0c565b61193b6001826132fa565b6001600160401b03811115611952576119526133bd565b60405190808252806020026020018201604052801561197b578160200160208202803683370190505b50915060005b61198c6002836132fa565b8110156119e057600781815481106119a6576119a66133a7565b90600052602060002001548382815181106119c3576119c36133a7565b6020908102919091010152806119d881613376565b915050611981565b506000826119ef6002846132fa565b815181106119ff576119ff6133a7565b6020026020010181815250505b50919050565b60008060606000611a2a611a2587612349565b612398565b905060005b60018651611a3d91906132fa565b811015611a9357611a7f82878381518110611a5a57611a5a6133a7565b602002602001015181518110611a7257611a726133a7565b6020026020010151612398565b915080611a8b81613376565b915050611a2f565b506000611ab9828760018951611aa991906132fa565b81518110611a5a57611a5a6133a7565b9050611ade81600081518110611ad157611ad16133a7565b6020026020010151612478565b15611afc57611af981600081518110611a7257611a726133a7565b90505b611b1f81600081518110611b1257611b126133a7565b602002602001015161249f565b9450611b4481600181518110611b3757611b376133a7565b60200260200101516124f5565b9350611b6981600281518110611b5c57611b5c6133a7565b6020026020010151612536565b925050509250925092565b60008151835114611b87575060006117e4565b818051906020012083805190602001201490506117e4565b6000818152600260208181526040808420929092558151848152908101929092527fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807910160405180910390a150565b60056000905560046000905560066000611c089190612b05565b611c1460076000612b42565b611c20600a6000612b42565b611c2c60086000612b60565b6000600955600b805460ff19169055565b60606000826001600160401b03811115611c5957611c596133bd565b6040519080825280601f01601f191660200182016040528015611c83576020820181803683370190505b50905060005b83811015611cf25785611c9c82876132c3565b81518110611cac57611cac6133a7565b602001015160f81c60f81b828281518110611cc957611cc96133a7565b60200101906001600160f81b031916908160001a90535080611cea81613376565b915050611c89565b50949350505050565b6000805b8551811015611f96576000868281518110611d1c57611d1c6133a7565b602002602001015190506000611d3382600061177e565b90506000611d428360206125b2565b90506000611d5184604061177e565b90506000611d6085608061177e565b90506000611d6f8660a061177e565b90506000611d7d878361177e565b90506000611d9688611d908560206132c3565b84611c3d565b90506000611da4898761177e565b90508b8814611e0f5760405162461bcd60e51b815260206004820152603160248201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206044820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b6064820152608401610659565b868d14611e745760405162461bcd60e51b815260206004820152602d60248201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460448201526c040c8de40dcdee840dac2e8c6d609b1b6064820152608401610659565b8d60018f51611e8391906132fa565b81518110611e9357611e936133a7565b6020026020010151600014611ea757600080fd5b8d51811480611ec157508d51611ebe9060016132c3565b81145b611f0d5760405162461bcd60e51b815260206004820181905260248201527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e746044820152606401610659565b84611f3657611f1b8c611b9f565b611f23611bee565b60019a5050505050505050505050610452565b600880546001810182556000919091528251611f79917ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301906020850190612a0c565b505050505050505050508080611f8e90613376565b915050611cff565b50600095945050505050565b600060606000806000611fb58787611a12565b92509250925060015483146120295760405162461bcd60e51b815260206004820152603460248201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616044820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b6064820152608401610659565b60006060836001600160a01b031683604051612045919061304f565b6000604051808303816000865af19150503d8060008114612082576040519150601f19603f3d011682016040523d82523d6000602084013e612087565b606091505b509092509050816120d2577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66120bc82612617565b6040516120c991906130a9565b60405180910390a15b60095460085414612127576008546009546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b9261211a92908252602082015260400190565b60405180910390a1600091505b600b5460ff16612137578161213a565b60005b96509450505050505b9250929050565b600061215783600061177e565b9050600061216684602061177e565b6040805160208082018990528183018690528251808303840181526060909201909252805191012090915060005b84518110156123075760006121c38683815181106121b4576121b46133a7565b6020026020010151600061177e565b90508085146121d157600080fd5b60006121f78784815181106121e8576121e86133a7565b6020026020010151606061177e565b9050600061221e888581518110612210576122106133a7565b60200260200101518361177e565b905060005b818110156122f05760006122748a8781518110612242576122426133a7565b602002602001015183602061225791906132db565b6122628760206132c3565b61226c91906132c3565b016020015190565b60405163267ad75360e21b815289151560048201526024810189905290915081906001600160a01b038216906399eb5d4c90604401600060405180830381600087803b1580156122c357600080fd5b505af11580156122d7573d6000803e3d6000fd5b50505050505080806122e890613376565b915050612223565b5050505080806122ff90613376565b915050612194565b5060408051878152602081018590527f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec910160405180910390a1505050505050565b604080518082019091526000808252602082015281518061237f5750506040805180820190915260008082526020820152919050565b6040805180820190915260209384018152928301525090565b60606123a382612478565b6123ac57600080fd5b60006123b783612676565b9050806001600160401b038111156123d1576123d16133bd565b60405190808252806020026020018201604052801561241657816020015b60408051808201909152600080825260208201528152602001906001900390816123ef5790505b509150600061242484612708565b905060005b61243282612763565b156124705761244082612787565b848281518110612452576124526133a7565b6020026020010181905250808061246890613376565b915050612429565b505050919050565b600081602001516000141561248f57506000919050565b50515160c060009190911a101590565b60006124aa826127e1565b6124b357600080fd5b6000806124bf84612807565b909250905060208111156124d257600080fd5b806124e1575060009392505050565b806020036101000a82510492505050919050565b6000612500826127e1565b61250957600080fd5b60008061251584612807565b90925090506014811461252757600080fd5b5051600160601b900492915050565b6060612541826127e1565b61254a57600080fd5b60008061255684612807565b9092509050806001600160401b03811115612573576125736133bd565b6040519080825280601f01601f19166020018201604052801561259d576020820181803683370190505b5092506125ab8284836128ab565b5050919050565b60008060005b602081101561260f576125cc8160086132db565b856125d783876132c3565b815181106125e7576125e76133a7565b01602001516001600160f81b031916901c91909117908061260781613376565b9150506125b8565b509392505050565b606060448251101561265c57505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b600482019150818060200190518101906117e49190612e41565b600061268182612478565b61268d57506000919050565b81518051600090811a91906126a1856128e9565b6126ab90836132c3565b9050600060018660200151846126c191906132c3565b6126cb91906132fa565b905060005b8183116126fe576126e08361296f565b6126ea90846132c3565b9250806126f681613376565b9150506126d0565b9695505050505050565b604080516080810182526000918101828152606082018390528152602081019190915261273482612478565b61273d57600080fd5b6000612748836128e9565b835161275491906132c3565b92825250602081019190915290565b80516020810151815160009291612779916132c3565b836020015110915050919050565b60408051808201909152600080825260208201526127a482612763565b1561010b57602082015160006127b98261296f565b8284526020840181905290506127cf81836132c3565b6020850152506127dc9050565b919050565b60008160200151600014156127f857506000919050565b50515160c060009190911a1090565b600080612813836127e1565b61281c57600080fd5b8251805160001a90608082101561283857946001945092505050565b60b8821015612866576001856020015161285291906132fa565b925061285f8160016132c3565b93506128a4565b602085015160b619830190819061287f906001906132fa565b61288991906132fa565b935061289581836132c3565b6128a09060016132c3565b9450505b5050915091565b6020601f820104836020840160005b838110156128d6576020810283810151908301526001016128ba565b5050505060008251602001830152505050565b600081602001516000141561290057506000919050565b8151805160001a90608082101561291b575060009392505050565b60b8821080612936575060c08210158015612936575060f882105b15612945575060019392505050565b60c08210156129645761295960b7836132fa565b6104529060016132c3565b61295960f7836132fa565b8051600090811a60808110156129885760019150611a0c565b60b88110156129ae5761299c6080826132fa565b6129a79060016132c3565b9150611a0c565b60c08110156129d757600183015160b76020839003016101000a9004810160b519019150611a0c565b60f88110156129eb5761299c60c0826132fa565b600183015160f76020839003016101000a9004810160f51901915050919050565b828054612a1890613341565b90600052602060002090601f016020900481019282612a3a5760008555612a80565b82601f10612a5357805160ff1916838001178555612a80565b82800160010185558215612a80579182015b82811115612a80578251825591602001919060010190612a65565b50612a8c929150612b7e565b5090565b828054828255906000526020600020908101928215612a805791602002820182811115612a80578251825591602001919060010190612a65565b828054828255906000526020600020908101928215612a80579160200282015b82811115612a80578235825591602001919060010190612aea565b508054612b1190613341565b6000825580601f10612b21575050565b601f016020900490600052602060002090810190612b3f9190612b7e565b50565b5080546000825590600052602060002090810190612b3f9190612b7e565b5080546000825590600052602060002090810190612b3f9190612b93565b5b80821115612a8c5760008155600101612b7f565b80821115612a8c576000612ba78282612b05565b50600101612b93565b60006001600160401b0380841115612bca57612bca6133bd565b604051601f8501601f19908116603f01168101908282118183101715612bf257612bf26133bd565b81604052809350858152868686011115612c0b57600080fd5b612c19866020830187613311565b5050509392505050565b60008083601f840112612c3557600080fd5b5081356001600160401b03811115612c4c57600080fd5b6020830191508360208260051b850101111561214357600080fd5b60008083601f840112612c7957600080fd5b5081356001600160401b03811115612c9057600080fd5b60208301915083602082850101111561214357600080fd5b600060208284031215612cba57600080fd5b8135612cc5816133d3565b9392505050565b60008060008060008060608789031215612ce557600080fd5b86356001600160401b0380821115612cfc57600080fd5b612d088a838b01612c23565b90985096506020890135915080821115612d2157600080fd5b612d2d8a838b01612c23565b90965094506040890135915080821115612d4657600080fd5b50612d5389828a01612c23565b979a9699509497509295939492505050565b6000806000806000806000806080898b031215612d8157600080fd5b88356001600160401b0380821115612d9857600080fd5b612da48c838d01612c23565b909a50985060208b0135915080821115612dbd57600080fd5b612dc98c838d01612c23565b909850965060408b0135915080821115612de257600080fd5b612dee8c838d01612c23565b909650945060608b0135915080821115612e0757600080fd5b50612e148b828c01612c23565b999c989b5096995094979396929594505050565b600060208284031215612e3a57600080fd5b5035919050565b600060208284031215612e5357600080fd5b81516001600160401b03811115612e6957600080fd5b8201601f81018413612e7a57600080fd5b61045284825160208401612bb0565b600060208284031215612e9b57600080fd5b81516001600160401b0380821115612eb257600080fd5b9083019060408286031215612ec657600080fd5b604051604081018181108382111715612ee157612ee16133bd565b6040528251612eef816133d3565b8152602083015182811115612f0357600080fd5b80840193505085601f840112612f1857600080fd5b612f2786845160208601612bb0565b602082015295945050505050565b60008060408385031215612f4857600080fd5b823591506020830135612f5a816133d3565b809150509250929050565b60008060008060608587031215612f7b57600080fd5b843593506020850135612f8d816133d3565b925060408501356001600160401b03811115612fa857600080fd5b612fb487828801612c67565b95989497509550505050565b60008060008060608587031215612fd657600080fd5b843593506020850135925060408501356001600160401b03811115612fa857600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261303b816020860160208601613311565b601f01601f19169290920160200192915050565b60008251613061818460208701613311565b9190910192915050565b8481526020810184905260006001600160fb1b0383111561308b57600080fd5b8260051b808560408501376000920160400191825250949350505050565b602081526000612cc56020830184613023565b8581526001600160a01b03851660208201526080604082018190526000906130e79083018587612ffa565b82810360608401526130f98185613023565b98975050505050505050565b85815260018060a01b0385166020820152836040820152608060608201526000613133608083018486612ffa565b979650505050505050565b87815260006020888184015260c060408401528660c084015260018060fb1b0387111561316a57600080fd5b8660051b808960e086013760e0908401848103820160608601528754918101829052600088815283812092909161010001905b808310156131c65783546001600160a01b0316825260019384019392909201919084019061319d565b50871515608087015285810360a08701526131e18188613023565b9d9c50505050505050505050505050565b8481528360208201526080604082015260006132116080830185613023565b82810360608401526131338185613023565b878152602081018790526001600160a01b0386811660408301528516606082015260c06080820181905260009061325c90830186613023565b82810360a084015261326f818587612ffa565b9a9950505050505050505050565b6000808335601e1984360301811261329457600080fd5b8301803591506001600160401b038211156132ae57600080fd5b60200191503681900382131561214357600080fd5b600082198211156132d6576132d6613391565b500190565b60008160001904831182151516156132f5576132f5613391565b500290565b60008282101561330c5761330c613391565b500390565b60005b8381101561332c578181015183820152602001613314565b8381111561333b576000848401525b50505050565b600181811c9082168061335557607f821691505b60208210811415611a0c57634e487b7160e01b600052602260045260246000fd5b600060001982141561338a5761338a613391565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612b3f57600080fdfea2646970667358221220383e6f0fd1dc3efe2259186fa89c423d4a631244b13cfef26b014ec094eb9ddc64736f6c63430008050033";

    public static final String FUNC_ACTIVECALLCROSSCHAINROOTTXID = "activeCallCrosschainRootTxId";

    public static final String FUNC_ACTIVECALLGRAPH = "activeCallGraph";

    public static final String FUNC_ACTIVECALLROOTBLOCKCHAINID = "activeCallRootBlockchainId";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_ADDVERIFIER = "addVerifier";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSCHAINROOTTXID = "getActiveCallCrosschainRootTxId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_WHOCALLEDME = "whoCalledMe";

    public static final Event BADCALL_EVENT = new Event("BadCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CALLFAILURE_EVENT = new Event("CallFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event CALLRESULT_EVENT = new Event("CallResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CrosschainControl(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrosschainControl(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrosschainControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrosschainControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BadCallEventResponse> getBadCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADCALL_EVENT, transactionReceipt);
        ArrayList<BadCallEventResponse> responses = new ArrayList<BadCallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadCallEventResponse typedResponse = new BadCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BadCallEventResponse>() {
            @Override
            public BadCallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADCALL_EVENT, log);
                BadCallEventResponse typedResponse = new BadCallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADCALL_EVENT));
        return badCallEventFlowable(filter);
    }

    public List<CallFailureEventResponse> getCallFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFAILURE_EVENT, transactionReceipt);
        ArrayList<CallFailureEventResponse> responses = new ArrayList<CallFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallFailureEventResponse typedResponse = new CallFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallFailureEventResponse>() {
            @Override
            public CallFailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFAILURE_EVENT, log);
                CallFailureEventResponse typedResponse = new CallFailureEventResponse();
                typedResponse.log = log;
                typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFAILURE_EVENT));
        return callFailureEventFlowable(filter);
    }

    public List<CallResultEventResponse> getCallResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLRESULT_EVENT, transactionReceipt);
        ArrayList<CallResultEventResponse> responses = new ArrayList<CallResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallResultEventResponse typedResponse = new CallResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallResultEventResponse>() {
            @Override
            public CallResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLRESULT_EVENT, log);
                CallResultEventResponse typedResponse = new CallResultEventResponse();
                typedResponse.log = log;
                typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLRESULT_EVENT));
        return callResultEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> activeCallCrosschainRootTxId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSCHAINROOTTXID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addVerifier(BigInteger _blockchainId, String verifier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDVERIFIER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, verifier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getActiveCallCrosschainRootTxId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSCHAINROOTTXID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<BigInteger> _blockchainIds, List<byte[]> _signedEventInfo, List<byte[]> _signatures) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signedEventInfo, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(List<BigInteger> _blockchainIds, List<byte[]> _signedEventInfo, List<byte[]> _signatures, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signedEventInfo, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<BigInteger> _blockchainIds, List<byte[]> _signedEventInfo, List<byte[]> _signatures) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signedEventInfo, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>> whoCalledMe() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHOCALLEDME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static CrosschainControl load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainControl(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrosschainControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainControl(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrosschainControl load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrosschainControl(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrosschainControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrosschainControl(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BadCallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;
    }

    public static class CallFailureEventResponse extends BaseEventResponse {
        public String _revertReason;
    }

    public static class CallResultEventResponse extends BaseEventResponse {
        public BigInteger _blockchainId;

        public String _contract;

        public byte[] _functionCall;

        public byte[] _result;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}
