package net.consensys.gpact.cbc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.8.
 */
@SuppressWarnings("rawtypes")
public class CrosschainControl extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162003f5838038062003f588339810160408190526200003491620000b7565b6200005a6200004b64010000000062000063810204565b64010000000062000067810204565b600355620000d1565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000ca57600080fd5b5051919050565b613e7780620000e16000396000f3fe608060405234801561001057600080fd5b5060043610610133576000357c01000000000000000000000000000000000000000000000000000000009004806392b2c335116100bf578063df1bba011161008e578063df1bba0114610238578063f0f67af21461024b578063f2fde38b1461025e578063f830b7b414610271578063fb11639e1461029157600080fd5b806392b2c335146101f65780639efabd3414610209578063b28320961461021c578063b4c3b7561461022f57600080fd5b8063715018a611610106578063715018a6146101855780637bf37a091461018d578063877ba01d146101955780638da5cb5b146101c85780638e22d534146101e357600080fd5b806319836dc7146101385780633193c08b1461014d57806339ce107e14610169578063439160df1461017c575b600080fd5b61014b610146366004612f6b565b6102a4565b005b61015660065481565b6040519081526020015b60405180910390f35b61014b610177366004612f9b565b610315565b61015660035481565b61014b6103d0565b600654610156565b6101b86101a3366004612fb8565b60056020526000908152604090205460ff1681565b6040519015158152602001610160565b600054604051600160a060020a039091168152602001610160565b6101566101f136600461301a565b610409565b61014b61020436600461301a565b610448565b61014b6102173660046130ba565b610522565b61014b61022a366004612f6b565b61074f565b600654156101b8565b61014b6102463660046131ab565b610860565b61014b6102593660046130ba565b610978565b61014b61026c366004612f9b565b610edd565b61015661027f366004612fb8565b60046020526000908152604090205481565b61014b61029f3660046131e6565b610f95565b600054600160a060020a031633146102da5760405160e560020a62461bcd0281526004016102d190613329565b60405180910390fd5b600091825260026020526040909120805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b60005b600c548110156103705781600160a060020a0316600c828154811061033f5761033f61335e565b600091825260209091200154600160a060020a0316141561035e575050565b8061036881613390565b915050610318565b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146103fd5760405160e560020a62461bcd0281526004016102d190613329565b6104076000611353565b565b600080606061041a878787876113b0565b9092509050811561043057600092505050610440565b61043b8160006116e3565b925050505b949350505050565b60006060610458868686866113b0565b90925090508161051a5761047b8160405180602001604052806000815250611752565b61051a577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516105049060208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527f65637465642072657475726e2076616c75657300000000000000000000000000606082015260800190565b60405180910390a1600d805460ff191660011790555b505050505050565b6105368a8a8a8a8a8a8a8a8a8a600061177d565b6000808585600081811061054c5761054c61335e565b905060200281019061055e91906133ab565b81019061056b9190613410565b909250905060006105b98d8d83816105855761058561335e565b9050602002013584604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b905060015b868110156106e457600060608989848181106105dc576105dc61335e565b90506020028101906105ee91906133ab565b8101906105fb919061358d565b5093955093505050868314905061061157600080fd5b60005b81518110156106ce5760008282815181106106315761063161335e565b60209081029190910101516040517f99eb5d4c000000000000000000000000000000000000000000000000000000008152881515600482015260248101889052909150600160a060020a038216906399eb5d4c90604401600060405180830381600087803b1580156106a257600080fd5b505af11580156106b6573d6000803e3d6000fd5b505050505080806106c690613390565b915050610614565b50505080806106dc90613390565b9150506105be565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec8d8d60008181106107195761071961335e565b9050602002013584604051610738929190918252602082015260400190565b60405180910390a150505050505050505050505050565b600054600160a060020a0316331461077c5760405160e560020a62461bcd0281526004016102d190613329565b816107cc5760405160e560020a62461bcd02815260206004820152601560248201527f496e76616c696420626c6f636b636861696e206964000000000000000000000060448201526064016102d1565b600160a060020a0381166108255760405160e560020a62461bcd02815260206004820152601860248201527f496e76616c69642076657269666965722061646472657373000000000000000060448201526064016102d1565b600091825260016020526040909120805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b3233146108b25760405160e560020a62461bcd02815260206004820181905260248201527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f4160448201526064016102d1565b600084815260046020526040902054156109115760405160e560020a62461bcd02815260206004820152601e60248201527f5472616e73616374696f6e20616c72656164792072656769737465726564000060448201526064016102d1565b600061091d428561368c565b60008681526004602052604090819020829055519091507f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614249061096990879033908590889088906136cd565b60405180910390a15050505050565b61098c8a8a8a8a8a8a8a8a8a8a600161177d565b60008a8a60008181106109a1576109a161335e565b6020029190910135915050323314610a245760405160e560020a62461bcd02815260206004820152602860248201527f5472616e73616374696f6e206d75737420626520696e7374696761746564206260448201527f7920616e20454f4100000000000000000000000000000000000000000000000060648201526084016102d1565b8060035414610a785760405160e560020a62461bcd02815260206004820152601f60248201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e0060448201526064016102d1565b88886000818110610a8b57610a8b61335e565b9050602002016020810190610aa09190612f9b565b600160a060020a031630600160a060020a031614610b295760405160e560020a62461bcd02815260206004820152602d60248201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360448201527f206e6f742074686973206f6e650000000000000000000000000000000000000060648201526084016102d1565b6000806000606088886000818110610b4357610b4361335e565b9050602002810190610b5591906133ab565b810190610b629190613707565b6000848152600460205260409020549397509195509350915080610bcb5760405160e560020a62461bcd02815260206004820152600f60248201527f43616c6c206e6f7420616374697665000000000000000000000000000000000060448201526064016102d1565b6001811415610c1f5760405160e560020a62461bcd02815260206004820152601460248201527f43616c6c20656e6465642028737563636573732900000000000000000000000060448201526064016102d1565b6002811415610c735760405160e560020a62461bcd02815260206004820152601460248201527f43616c6c20656e64656420286661696c7572652900000000000000000000000060448201526064016102d1565b80421115610c9757610c8485611c45565b610c8c611c94565b505050505050610ed1565b600160a060020a0384163214610cf25760405160e560020a62461bcd02815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016102d1565b81516020830120604080516001808252818301909252600091816020016020820280368337019050509050610d32610d2a8c8e61376a565b82848a611cf3565b15610d44575050505050505050610ed1565b610d598482610d5460018f6137dc565b611f64565b6040805160208082018b90528183018a90528251808303840181526060909201909252805191012060068190556000610d9386848c612133565b50905060005b600c54811015610e57576000600c8281548110610db857610db861335e565b6000918252602090912001546040517f99eb5d4c000000000000000000000000000000000000000000000000000000008152841515600482015260248101869052600160a060020a03909116915081906399eb5d4c90604401600060405180830381600087803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b50505050508080610e4f90613390565b915050610d99565b5080610e64576002610e67565b60015b60008a8152600460205260409081902091909155517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80790610eb6908b9084909182521515602082015260400190565b60405180910390a1610ec6611c94565b505050505050505050505b50505050505050505050565b600054600160a060020a03163314610f0a5760405160e560020a62461bcd0281526004016102d190613329565b600160a060020a038116610f895760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102d1565b610f9281611353565b50565b610fa98c8c8c8c8c8c8c8c8c8c600161177d565b60008c8c6000818110610fbe57610fbe61335e565b60200291909101359150503233146110415760405160e560020a62461bcd02815260206004820152602260248201527f5365676d656e74206d7573742062652063616c6c65642066726f6d20616e204560448201527f4f4100000000000000000000000000000000000000000000000000000000000060648201526084016102d1565b6000806060898960008181106110595761105961335e565b905060200281019061106b91906133ab565b8101906110789190613707565b92955090935090915050600160a060020a03821632146110dd5760405160e560020a62461bcd02815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016102d1565b6000848488886040516020016110f694939291906137f3565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff16156111965760405160e560020a62461bcd028152602060048201526024808201527f5365676d656e74207472616e73616374696f6e20616c7265616479206578656360448201527f757465640000000000000000000000000000000000000000000000000000000060648201526084016102d1565b6000908152600560209081526040909120805460ff19166001908117909155825191830191909120908a1115611264576112106111d38b8d61376a565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250899150611cf39050565b1561121f575050505050611345565b61126482888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d549250600191508f90506137dc565b60408051602080820188905281830187905282518083038401815260609092019092528051910120600681905550600060606112d5848a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c9250612133915050565b60405191935091507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f9061131790889086908d908d90600c90899089906138a5565b60405180910390a160018c11156113355761133061234e565b61133d565b61133d6123ae565b505050505050505b505050505050505050505050565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600b54600a5460009160609181106113eb575050600d805460ff191660019081179091556040805160208101909152600081529091506116da565b6000600782815481106114005761140061335e565b906000526020600020015490506000600883815481106114225761142261335e565b600091825260208220015460098054600160a060020a039092169350908590811061144f5761144f61335e565b90600052602060002001805461146490613972565b80601f016020809104026020016040519081016040528092919081815260200182805461149090613972565b80156114dd5780601f106114b2576101008083540402835291602001916114dd565b820191906000526020600020905b8154815290600101906020018083116114c057829003601f168201915b50505050509050828a141580611505575081600160a060020a031689600160a060020a031614155b8061154e575061154c88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611752915050565b155b156115d457600d805460ff1916600190811790915561156e90859061368c565b600b556040517f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15906115ad9085908d9086908e9087908f908f906139b0565b60405180910390a160016040518060200160405280600081525095509550505050506116da565b6000600a856115e281613390565b9650815481106115f4576115f461335e565b90600052602060002001805461160990613972565b80601f016020809104026020016040519081016040528092919081815260200182805461163590613972565b80156116825780601f1061165757610100808354040283529160200191611682565b820191906000526020600020905b81548152906001019060200180831161166557829003601f168201915b5050505050905084600b819055507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b856040516116c7959493929190613a09565b60405180910390a1600096509450505050505b94509492505050565b60006116f082602061368c565b835110156117435760405160e560020a62461bcd02815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e7432353629000060448201526064016102d1565b50818101602001515b92915050565b600081518351146117655750600061174c565b8180519060200120838051906020012014905061174c565b89806117ce5760405160e560020a62461bcd02815260206004820152601a60248201527f4d757374206265206174206c65617374206f6e65206576656e7400000000000060448201526064016102d1565b8089146118465760405160e560020a62461bcd02815260206004820152603460248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642063626360448201527f416464726573736573206d757374206d6174636800000000000000000000000060648201526084016102d1565b8087146118e45760405160e560020a62461bcd02815260206004820152604160248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642065766560448201527f6e742066756e6374696f6e207369676e617475726573206d757374206d61746360648201527f6800000000000000000000000000000000000000000000000000000000000000608482015260a4016102d1565b80851461195c5760405160e560020a62461bcd02815260206004820152603260248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642065766560448201527f6e742064617461206d757374206d61746368000000000000000000000000000060648201526084016102d1565b8083146119d45760405160e560020a62461bcd02815260206004820152602560248201527f4e756d626572206f66206576656e747320616e64207369676e6174757265732060448201527f6d6174636800000000000000000000000000000000000000000000000000000060648201526084016102d1565b60005b81811015611c365780611acb57600083611a11577fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807611a33565b7f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614245b9050898983818110611a4757611a4761335e565b905060200201358114611ac55760405160e560020a62461bcd02815260206004820152602960248201527f556e6578706563746564206669727374206576656e742066756e6374696f6e2060448201527f7369676e6174757265000000000000000000000000000000000000000000000060648201526084016102d1565b50611b7b565b888882818110611add57611add61335e565b905060200201357fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f14611b7b5760405160e560020a62461bcd02815260206004820152602a60248201527f4576656e742066756e6374696f6e207369676e6174757265206e6f7420666f7260448201527f2061207365676d656e740000000000000000000000000000000000000000000060648201526084016102d1565b611c248d8d83818110611b9057611b9061335e565b905060200201358c8c84818110611ba957611ba961335e565b9050602002016020810190611bbe9190612f9b565b8b8b85818110611bd057611bd061335e565b905060200201358a8a86818110611be957611be961335e565b9050602002810190611bfb91906133ab565b8a8a88818110611c0d57611c0d61335e565b9050602002810190611c1f91906133ab565b6123d7565b80611c2e81613390565b9150506119d7565b50505050505050505050505050565b6000818152600460209081526040808320600290558051848152918201929092527fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807910160405180910390a150565b611ca060076000612e2a565b611cac60086000612e2a565b611cb860096000612e48565b611cc4600a6000612e48565b6000600b55600d5460ff1615611cdf57600d805460ff191690555b600660009055600c60006104079190612e2a565b600060015b8551811015611f5857600080606080600060608b8781518110611d1d57611d1d61335e565b6020026020010151806020019051810190611d389190613b0c565b949a50929850909650945092509050888614611dbf5760405160e560020a62461bcd02815260206004820152603160248201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e642060448201527f726f6f7420646f206e6f74206d6174636800000000000000000000000000000060648201526084016102d1565b848a14611e375760405160e560020a62461bcd02815260206004820152602d60248201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460448201527f20646f206e6f74206d617463680000000000000000000000000000000000000060648201526084016102d1565b8a60018c51611e4691906137dc565b81518110611e5657611e5661335e565b6020026020010151600014611e6a57600080fd5b8a5184511480611e8657508a51611e8290600161368c565b8451145b611ed55760405160e560020a62461bcd02815260206004820181905260248201527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e7460448201526064016102d1565b81611efb57611ee389611c45565b611eeb61234e565b6001975050505050505050610440565b600a80546001810182556000919091528151611f3e917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801906020840190612e66565b505050505050508080611f5090613390565b915050611cf8565b50600095945050505050565b815160008167ffffffffffffffff811115611f8157611f81613435565b604051908082528060200260200182016040528015611faa578160200160208202803683370190505b50905060005b611fbb6001846137dc565b81101561200b57848181518110611fd457611fd461335e565b6020026020010151828281518110611fee57611fee61335e565b60209081029190910101528061200381613390565b915050611fb0565b5060015b83811161051a5780826120236001866137dc565b815181106120335761203361335e565b60200260200101818152505060008060006120508986600161259b565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801849055600880548083019091557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556009805491820181556000528151939650919450925061211c917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af909101906020840190612e66565b50505050808061212b90613390565b91505061200f565b6000606060008060006121488888600161259b565b92509250925060035483146121c85760405160e560020a62461bcd02815260206004820152603460248201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d6160448201527f746368206d7920626c6f636b636861696e20696400000000000000000000000060648201526084016102d1565b600080885160011480156121f65750886000815181106121ea576121ea61335e565b60200260200101516000145b61221b5760006122058a6127ce565b90506122138b82600061259b565b509093509150505b6000612229848a85856129b3565b90506000606086600160a060020a0316836040516122479190613bff565b6000604051808303816000865af19150503d8060008114612284576040519150601f19603f3d011682016040523d82523d6000602084013e612289565b606091505b509092509050816122d4577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66122be82612a20565b6040516122cb9190613c1b565b60405180910390a15b600b54600a541461232957600a54600b546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b9261231c92908252602082015260400190565b60405180910390a1600091505b600d5460ff16612339578161233c565b60005b9d909c509a5050505050505050505050565b61235a60076000612e2a565b61236660086000612e2a565b61237260096000612e48565b600660009055600c60006123869190612e2a565b612392600a6000612e48565b6000600b55600d5460ff161561040757600d805460ff19169055565b600d5460ff1615611cdf57600d805460ff19169055600660009055600c60006104079190612e2a565b600087815260016020526040902054600160a060020a0316806124655760405160e560020a62461bcd02815260206004820152602560248201527f4e6f207265676973746572656420766572696669657220666f7220626c6f636b60448201527f636861696e00000000000000000000000000000000000000000000000000000060648201526084016102d1565b600088815260026020526040902054600160a060020a038881169116146124f75760405160e560020a62461bcd02815260206004820152602560248201527f44617461206e6f7420656d697474656420627920617070726f76656420636f6e60448201527f747261637400000000000000000000000000000000000000000000000000000060648201526084016102d1565b60008888888888604051602001612512959493929190613c2e565b60408051601f19818403018152908290527f4c1ce9020000000000000000000000000000000000000000000000000000000082529150600160a060020a03831690634c1ce9029061256f908c908b9086908a908a90600401613c6e565b60006040518083038186803b15801561258757600080fd5b505afa158015611c36573d6000803e3d6000fd5b60008060606000805b86518110156126c3576000806125ba8a85612ad1565b905060ff811661264e57600189516125d291906137dc565b83146126495760405160e560020a62461bcd02815260206004820152603260248201527f52656163686564206c6561662066756e6374696f6e206275742074686572652060448201527f6973206d6f72652063616c6c20706174682e000000000000000000000000000060648201526084016102d1565b6126a2565b60008984815181106126625761266261335e565b602002602001015190506126988b600160048461267f9190613ca0565b612689908961368c565b612693919061368c565b612b3a565b63ffffffff169250505b6126ac828561368c565b9350505080806126bb90613390565b9150506125a4565b5085600187516126d391906137dc565b815181106126e3576126e361335e565b60200260200101516000146127445760006126fe8883612ad1565b905060ff81161561273457600061271a8961269360018661368c565b63ffffffff16905061272c818461368c565b925050612742565b61273f60018361368c565b91505b505b61274e87826116e3565b935061275b60208261368c565b905061276a8782016014015190565b925084156127b15761277d60148261368c565b9050600061278b8883612ba3565b905061279860028361368c565b91506127a988838361ffff16612c0c565b9250506127c4565b6040518060200160405280600081525091505b5093509350939050565b80516060908190836127e16001836137dc565b815181106127f1576127f161335e565b60200260200101516000146128d3578067ffffffffffffffff81111561281957612819613435565b604051908082528060200260200182016040528015612842578160200160208202803683370190505b50915060005b6128536001836137dc565b8110156128a35784818151811061286c5761286c61335e565b60200260200101518382815181106128865761288661335e565b60209081029190910101528061289b81613390565b915050612848565b506000826128b26001846137dc565b815181106128c2576128c261335e565b6020026020010181815250506129ac565b6128de6001826137dc565b67ffffffffffffffff8111156128f6576128f6613435565b60405190808252806020026020018201604052801561291f578160200160208202803683370190505b50915060005b6129306002836137dc565b811015612980578481815181106129495761294961335e565b60200260200101518382815181106129635761296361335e565b60209081029190910101528061297881613390565b915050612925565b5060008261298f6002846137dc565b8151811061299f5761299f61335e565b6020026020010181815250505b5092915050565b6040805160208101859052808201849052600160a060020a0383166c0100000000000000000000000002606080830191909152825160548184030181526074830190935291612a0791879190609401613cbf565b6040516020818303038152906040529050949350505050565b6060602482511015612a5c57612a368251612cd9565b604051602001612a469190613cee565b6040516020818303038152906040529050919050565b81516004909201916044118015612ab657600083806020019051810190612a839190613d59565b9050612a8e81612cd9565b604051602001612a9e9190613d72565b60405160208183030381529060405292505050919050565b82806020019051810190612aca9190613db7565b9392505050565b6000612ade82600161368c565b83511015612b315760405160e560020a62461bcd02815260206004820152601c60248201527f736c6963696e67206f7574206f662072616e6765202875696e7438290000000060448201526064016102d1565b50016001015190565b6000612b4782600461368c565b83511015612b9a5760405160e560020a62461bcd02815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7433322900000060448201526064016102d1565b50016004015190565b6000612bb082600261368c565b83511015612c035760405160e560020a62461bcd02815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7431362900000060448201526064016102d1565b50016002015190565b6060612c18828461368c565b84511015612c6b5760405160e560020a62461bcd02815260206004820152601260248201527f52656164206f7574206f6620626f756e6473000000000000000000000000000060448201526064016102d1565b606082158015612c8657604051915060208201604052612cd0565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612cbf578051835260209283019201612ca7565b5050858452601f01601f1916604052505b50949350505050565b606081612d1957505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612d435780612d2d81613390565b9150612d3c9050600a83613e19565b9150612d1d565b60008167ffffffffffffffff811115612d5e57612d5e613435565b6040519080825280601f01601f191660200182016040528015612d88576020820181803683370190505b5090505b841561044057612d9d6001836137dc565b9150612daa600a86613e2d565b612db590603061368c565b7f010000000000000000000000000000000000000000000000000000000000000002818381518110612de957612de961335e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612e23600a86613e19565b9450612d8c565b5080546000825590600052602060002090810190610f929190612eea565b5080546000825590600052602060002090810190610f929190612eff565b828054612e7290613972565b90600052602060002090601f016020900481019282612e945760008555612eda565b82601f10612ead57805160ff1916838001178555612eda565b82800160010185558215612eda579182015b82811115612eda578251825591602001919060010190612ebf565b50612ee6929150612eea565b5090565b5b80821115612ee65760008155600101612eeb565b80821115612ee6576000612f138282612f1c565b50600101612eff565b508054612f2890613972565b6000825580601f10612f38575050565b601f016020900490600052602060002090810190610f929190612eea565b600160a060020a0381168114610f9257600080fd5b60008060408385031215612f7e57600080fd5b823591506020830135612f9081612f56565b809150509250929050565b600060208284031215612fad57600080fd5b8135612aca81612f56565b600060208284031215612fca57600080fd5b5035919050565b60008083601f840112612fe357600080fd5b50813567ffffffffffffffff811115612ffb57600080fd5b60208301915083602082850101111561301357600080fd5b9250929050565b6000806000806060858703121561303057600080fd5b84359350602085013561304281612f56565b9250604085013567ffffffffffffffff81111561305e57600080fd5b61306a87828801612fd1565b95989497509550505050565b60008083601f84011261308857600080fd5b50813567ffffffffffffffff8111156130a057600080fd5b602083019150836020808302850101111561301357600080fd5b60008060008060008060008060008060a08b8d0312156130d957600080fd5b8a3567ffffffffffffffff808211156130f157600080fd5b6130fd8e838f01613076565b909c509a5060208d013591508082111561311657600080fd5b6131228e838f01613076565b909a50985060408d013591508082111561313b57600080fd5b6131478e838f01613076565b909850965060608d013591508082111561316057600080fd5b61316c8e838f01613076565b909650945060808d013591508082111561318557600080fd5b506131928d828e01613076565b915080935050809150509295989b9194979a5092959850565b600080600080606085870312156131c157600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561305e57600080fd5b60008060008060008060008060008060008060c08d8f03121561320857600080fd5b67ffffffffffffffff8d35111561321e57600080fd5b61322b8e8e358f01613076565b909c509a5067ffffffffffffffff60208e0135111561324957600080fd5b6132598e60208f01358f01613076565b909a50985067ffffffffffffffff60408e0135111561327757600080fd5b6132878e60408f01358f01613076565b909850965067ffffffffffffffff60608e013511156132a557600080fd5b6132b58e60608f01358f01613076565b909650945067ffffffffffffffff60808e013511156132d357600080fd5b6132e38e60808f01358f01613076565b909450925067ffffffffffffffff60a08e0135111561330157600080fd5b6133118e60a08f01358f01613076565b81935080925050509295989b509295989b509295989b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b60006000198214156133a4576133a4613377565b5060010190565b6000808335601e198436030181126133c257600080fd5b83018035915067ffffffffffffffff8211156133dd57600080fd5b60200191503681900382131561301357600080fd5b8015158114610f9257600080fd5b803561340b816133f2565b919050565b6000806040838503121561342357600080fd5b823591506020830135612f90816133f2565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561347757613477613435565b604052919050565b600067ffffffffffffffff82111561349957613499613435565b5060209081020190565b600082601f8301126134b457600080fd5b813560206134c96134c48361347f565b61344e565b828152918102840181019181810190868411156134e557600080fd5b8286015b848110156135095780356134fc81612f56565b83529183019183016134e9565b509695505050505050565b600067ffffffffffffffff82111561352e5761352e613435565b50601f01601f191660200190565b600082601f83011261354d57600080fd5b813561355b6134c482613514565b81815284602083860101111561357057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156135a657600080fd5b863595506020808801359550604088013567ffffffffffffffff808211156135cd57600080fd5b818a0191508a601f8301126135e157600080fd5b81356135ef6134c48261347f565b8181529084028301840190848101908d83111561360b57600080fd5b938501935b8285101561362957843582529385019390850190613610565b9850505060608a013592508083111561364157600080fd5b61364d8b848c016134a3565b955061365b60808b01613400565b945060a08a013592508083111561367157600080fd5b505061367f89828a0161353c565b9150509295509295509295565b6000821982111561369f5761369f613377565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152600160a060020a03851660208201528360408201526080606082015260006136fc6080830184866136a4565b979650505050505050565b6000806000806080858703121561371d57600080fd5b84359350602085013561372f81612f56565b925060408501359150606085013567ffffffffffffffff81111561375257600080fd5b61375e8782880161353c565b91505092959194509250565b60006137786134c48461347f565b8381526020808201919080860285013681111561379457600080fd5b855b818110156137d057803567ffffffffffffffff8111156137b65760008081fd5b6137c236828a0161353c565b865250938201938201613796565b50919695505050505050565b6000828210156137ee576137ee613377565b500390565b84815283602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561382b57600080fd5b60208302808560408501376000920160400191825250949350505050565b60005b8381101561386457818101518382015260200161384c565b83811115613873576000848401525b50505050565b60008151808452613891816020860160208601613849565b601f01601f19169290920160200192915050565b87815260006020888184015260c060408401528660c08401527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8711156138eb57600080fd5b808702808960e086013760e0908401848103820160608601528754918101829052600088815283812092909161010001905b80831015613946578354600160a060020a0316825260019384019392909201919084019061391d565b50871515608087015285810360a08701526139618188613879565b9d9c50505050505050505050505050565b60028104600182168061398657607f821691505b602082108114156139aa5760e060020a634e487b7102600052602260045260246000fd5b50919050565b8781528660208201526000600160a060020a03808816604084015280871660608401525060c060808301526139e860c0830186613879565b82810360a08401526139fb8185876136a4565b9a9950505050505050505050565b858152600160a060020a0385166020820152608060408201526000613a326080830185876136a4565b8281036060840152613a448185613879565b98975050505050505050565b600082601f830112613a6157600080fd5b81516020613a716134c48361347f565b82815291810284018101918181019086841115613a8d57600080fd5b8286015b84811015613509578051613aa481612f56565b8352918301918301613a91565b805161340b816133f2565b6000613aca6134c484613514565b9050828152838383011115613ade57600080fd5b612aca836020830184613849565b600082601f830112613afd57600080fd5b612aca83835160208501613abc565b60008060008060008060c08789031215613b2557600080fd5b865195506020808801519550604088015167ffffffffffffffff80821115613b4c57600080fd5b818a0191508a601f830112613b6057600080fd5b8151613b6e6134c48261347f565b8181529084028301840190848101908d831115613b8a57600080fd5b938501935b82851015613ba857845182529385019390850190613b8f565b60608d01519099509450505080831115613bc157600080fd5b613bcd8b848c01613a50565b9550613bdb60808b01613ab1565b945060a08a0151925080831115613bf157600080fd5b505061367f89828a01613aec565b60008251613c11818460208701613849565b9190910192915050565b602081526000612aca6020830184613879565b8581526c01000000000000000000000000600160a060020a0386160260208201528360348201528183605483013760009101605401908152949350505050565b858152846020820152608060408201526000613c8d6080830186613879565b8281036060840152613a448185876136a4565b6000816000190483118215151615613cba57613cba613377565b500290565b60008351613cd1818460208801613849565b835190830190613ce5818360208801613849565b01949350505050565b7f52657665727420666f7220756e6b6e6f776e206572726f722e204572726f722081527f6c656e6774683a20000000000000000000000000000000000000000000000000602082015260008251613d4c816028850160208701613849565b9190910160280192915050565b600060208284031215613d6b57600080fd5b5051919050565b7f50616e69633a2000000000000000000000000000000000000000000000000000815260008251613daa816007850160208701613849565b9190910160070192915050565b600060208284031215613dc957600080fd5b815167ffffffffffffffff811115613de057600080fd5b8201601f81018413613df157600080fd5b61044084825160208401613abc565b60e060020a634e487b7102600052601260045260246000fd5b600082613e2857613e28613e00565b500490565b600082613e3c57613e3c613e00565b50069056fea264697066735822122072dbfffec4ce3a26e1b4ddcebd27d71a785b9c0a371b605f2af9df2c9bbb141864736f6c63430008090033";

    public static final String FUNC_ACTIVECALLCROSSCHAINROOTTXID = "activeCallCrosschainRootTxId";

    public static final String FUNC_ADDREMOTECROSSCHAINCONTROL = "addRemoteCrosschainControl";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_ADDVERIFIER = "addVerifier";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSCHAINROOTTXID = "getActiveCallCrosschainRootTxId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event BADCALL_EVENT = new Event("BadCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CALLFAILURE_EVENT = new Event("CallFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event CALLRESULT_EVENT = new Event("CallResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CrosschainControl(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrosschainControl(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrosschainControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrosschainControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BadCallEventResponse> getBadCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADCALL_EVENT, transactionReceipt);
        ArrayList<BadCallEventResponse> responses = new ArrayList<BadCallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadCallEventResponse typedResponse = new BadCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BadCallEventResponse>() {
            @Override
            public BadCallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADCALL_EVENT, log);
                BadCallEventResponse typedResponse = new BadCallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADCALL_EVENT));
        return badCallEventFlowable(filter);
    }

    public List<CallFailureEventResponse> getCallFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFAILURE_EVENT, transactionReceipt);
        ArrayList<CallFailureEventResponse> responses = new ArrayList<CallFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallFailureEventResponse typedResponse = new CallFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallFailureEventResponse>() {
            @Override
            public CallFailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFAILURE_EVENT, log);
                CallFailureEventResponse typedResponse = new CallFailureEventResponse();
                typedResponse.log = log;
                typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFAILURE_EVENT));
        return callFailureEventFlowable(filter);
    }

    public List<CallResultEventResponse> getCallResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLRESULT_EVENT, transactionReceipt);
        ArrayList<CallResultEventResponse> responses = new ArrayList<CallResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallResultEventResponse typedResponse = new CallResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallResultEventResponse>() {
            @Override
            public CallResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLRESULT_EVENT, log);
                CallResultEventResponse typedResponse = new CallResultEventResponse();
                typedResponse.log = log;
                typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLRESULT_EVENT));
        return callResultEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> activeCallCrosschainRootTxId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSCHAINROOTTXID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> addRemoteCrosschainControl(BigInteger _blockchainId, String _cbc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDREMOTECROSSCHAINCONTROL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _cbc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addVerifier(BigInteger _blockchainId, String _verifier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDVERIFIER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _verifier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getActiveCallCrosschainRootTxId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSCHAINROOTTXID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<BigInteger> _blockchainIds, List<String> _cbcAddresses, List<byte[]> _eventFunctionSignatures, List<byte[]> _eventData, List<byte[]> _signatures) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_cbcAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_eventFunctionSignatures, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(List<BigInteger> _blockchainIds, List<String> _cbcAddresses, List<byte[]> _eventFunctionSignatures, List<byte[]> _eventData, List<byte[]> _signatures, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_cbcAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_eventFunctionSignatures, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<BigInteger> _blockchainIds, List<String> _cbcAddresses, List<byte[]> _eventFunctionSignatures, List<byte[]> _eventData, List<byte[]> _signatures) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_cbcAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_eventFunctionSignatures, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CrosschainControl load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainControl(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrosschainControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainControl(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrosschainControl load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrosschainControl(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrosschainControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrosschainControl(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId)));
        return deployRemoteCall(CrosschainControl.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BadCallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;
    }

    public static class CallFailureEventResponse extends BaseEventResponse {
        public String _revertReason;
    }

    public static class CallResultEventResponse extends BaseEventResponse {
        public BigInteger _blockchainId;

        public String _contract;

        public byte[] _functionCall;

        public byte[] _result;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}
