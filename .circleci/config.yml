version: 2.1
commands:
 prepare:
   steps:
      - checkout
      - restore_cache:
          name: Restore cached GPACT gradle dependencies
          keys:
            - deps-gpact-{{ checksum "build.gradle" }}
            - deps-gpact
      - restore_cache:
          name: Restore gradle build cache
          keys: # by decreasing rate of change...
            - build-cache-{{ .Revision }}
            - build-cache
      - run:
         name: Install Solidity
         command: |
           sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1C52189C923F6CA9
           sudo apt-get update
           sudo apt-get -y install software-properties-common
           sudo apt-get update
           sudo add-apt-repository -y ppa:ethereum/ethereum
           sudo apt-get update
           sudo apt-get -y install solc


 capture_test_results:
   steps:
      - run:
          name: Gather test results
          when: always
          command: |
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="build/test-results/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
            # show what is being gathered
            ls -R build/test-results
      - store_test_results:
          path: build/test-results


jobs:
  build:
    docker:
      - image: cimg/openjdk:11.0.11
    working_directory: ~/gpact
    steps:
      - prepare
      - run:
          name: Assemble
          command: |
            # Build the gpact
            ./gradlew --parallel --stacktrace --info --build-cache clean compileJava compileTestJava assemble
      - save_cache:
          name: Caching GPACT gradle dependencies
          key: deps-gpact-{{ checksum "build.gradle" }}
          paths:
            - .gradle
      - save_cache:
          name: Caching gradle build cache
          key: build-cache-{{ checksum "../besu/headcommit" }}-{{ .Revision }}
          paths:
            - ~/.gradle

  # This job does not work as the remote docker runs out of memory when trying to run
  # the Besu container.
  unitTestsDocker:
    docker:
      - image: cimg/openjdk:11.0.11
    working_directory: ~/gpact
    steps:
      - prepare
      - setup_remote_docker:
          version: 20.10.6
          docker_layer_caching: true
      - run:
          name: Create blockchains
          working_directory: ~/gpact/test-blockchains
          command: docker-compose up --no-start --force-recreate
      - run:
          name: Copy config and keys. Create log directory.
          working_directory: ~/gpact/test-blockchains
          command: |
            docker cp ./bc31/. test-blockchains_bc31node1_1:/config
            docker cp ./keys/. test-blockchains_bc31node1_1:/opt/besu/keys
            docker cp ./bc32/. test-blockchains_bc32node1_1:/config
            docker cp ./keys/. test-blockchains_bc32node1_1:/opt/besu/keys
      - run:
          name: Start blockchains
          background: true
          working_directory: ~/gpact/test-blockchains
          command: docker-compose up --no-recreate bc31node1
      - run:
          command: docker container exec test-blockchains_bc31node1_1 ls -al /tmp/besu
          when: always
      - run:
          command: docker container exec test-blockchains_bc31node1_1 chmod 777 /tmp/besu
          when: always
      - run:
          command: docker container exec test-blockchains_bc31node1_1 ls -al /tmp/besu
          when: always
      - run: docker container exec test-blockchains_bc31node1_1 ls -al /config
      - run: sleep 10
      #- run:
      #    name: Build and test
      #    command: ./gradlew test
      - run:
          name: Stop blockchains
          working_directory: ~/gpact/test-blockchains
          command: docker-compose stop
          when: always
      - run:
          name: Logs from bc31
          working_directory: ~/gpact/test-blockchains
          command: |
            docker container logs test-blockchains_bc31node1_1
          when: always
      - run:
          name: Logs from bc32
          working_directory: ~/gpact/test-blockchains
          command: |
            docker container logs test-blockchains_bc32node1_1
          when: always
      - run:
          name: Remove blockchains
          working_directory: ~/gpact/test-blockchains
          command: docker-compose down
          when: always
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unitTestsMachine:
    machine:
      image: ubuntu-2004:202107-02
    resource_class: large
    steps:
      # The home directory is: /home/circleci/project
      # gpact is cloned to: /home/circleci/project/.
      - prepare
      - run:
          name: Check code formatting
          command: ./gradlew solCheckFormat spotlessCheck
      - run:
          name: Create and Start blockchains
          working_directory: test-blockchains
          background: true
          command: docker-compose up
      - run: sleep 30
      - run:
          name: Build and test
          command: ./gradlew test
      - run:
          name: Stop blockchains
          working_directory: test-blockchains
          command: docker-compose stop
          when: always
      - run:
          name: Logs from bc31
          working_directory: test-blockchains
          command: |
            docker container logs test-blockchains_bc31node1_1
          when: always
      - run:
          name: Logs from bc32
          working_directory: test-blockchains
          command: |
            docker container logs test-blockchains_bc32node1_1
          when: always
      - run:
          name: Remove blockchains
          working_directory: test-blockchains
          command: docker-compose down
          when: always
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit






workflows:
  version: 2
  default:
    jobs:
      - unitTestsMachine
      #- assemble
      #- unitTestsMachine:
      #    requires:
      #      - build


