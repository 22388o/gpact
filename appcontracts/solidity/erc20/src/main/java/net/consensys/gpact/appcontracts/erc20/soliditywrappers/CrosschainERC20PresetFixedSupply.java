package net.consensys.gpact.appcontracts.erc20.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.5-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CrosschainERC20PresetFixedSupply extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620039e3380380620039e3833981016040819052620000349162000a80565b84848482828280600033600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b03929092169190911790558251620000bd906008906020860190620008db565b508151620000d3906009906020850190620008db565b50600a80546001600160a01b039092166001600160a01b0319909216919091178155600560065560075550620001119350849250859150506200011c565b505050505062000bd5565b6001600160a01b038216620001785760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b6200018381620001d4565b6200018f8282620002a2565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000805b6007548110156200023f57620001f0600482620003e2565b6200022a576001915060006200020860048362000435565b9050620002236004836200021d878562000b33565b6200047a565b506200023f565b80620002368162000b8b565b915050620001d8565b50806200029e5760405162461bcd60e51b815260206004820152602660248201527f416c6c20696e63726561736520746f74616c20737570706c7920736c6f747320604482015265696e2075736560d01b60648201526084016200016f565b5050565b6001600160a01b0382166200030b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a20726563697069656e74206163636f756e74206973207a65726f604482015267206164647265737360c01b60648201526084016200016f565b6001600160a01b0382166000805b60065481101562000382576200033260008483620004ae565b6200036d576001915060006200034a81858462000502565b9050620003666000858462000360898662000b33565b62000541565b5062000382565b80620003798162000b8b565b91505062000319565b5080620003dc5760405162461bcd60e51b815260206004820152602160248201527f416c6c20696e6372656173652062616c616e636520736c6f747320696e2075736044820152606560f81b60648201526084016200016f565b50505050565b600080838360405160200162000402929190918252602082015260400190565b60408051808303601f1901815291815281516020928301206000818152600590935291205490915015155b949350505050565b600080838360405160200162000455929190918252602082015260400190565b60408051601f19818403018152919052805160209091012090506200042d8162000585565b60408051602080820186905281830185905282518083038401815260609092019092528051910120620003dc8183620005f6565b604080516020810185905290810183905260608101829052600090819060800160408051808303601f1901815291815281516020928301206000818152600590935291205490915015155b95945050505050565b60408051602080820186905281830185905260608083018590528351808403909101815260809092019092528051910120600090620004f98162000585565b604080516020808201879052818301869052606080830186905283518084039091018152608090920190925280519101206200057e8183620005f6565b5050505050565b60008181526005602052604081205415620005e35760405162461bcd60e51b815260206004820152601f60248201527f52656164207768696c6520636f6e7472616374206974656d206c6f636b65640060448201526064016200016f565b5060009081526002602052604090205490565b60008281526005602052604090205415620006545760405162461bcd60e51b815260206004820152601460248201527f436f6e7472616374206974656d206c6f636b656400000000000000000000000060448201526064016200016f565b600160009054906101000a90046001600160a01b03166001600160a01b031663b4c3b7566040518163ffffffff1660e01b815260040160206040518083038186803b158015620006a357600080fd5b505afa158015620006b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006de919062000a55565b15620006f65760009182526002602052604090912055565b6001546040805163336d5b0960e01b815290516000926001600160a01b03169163336d5b09916004808301926020929190829003018186803b1580156200073c57600080fd5b505afa15801562000751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000777919062000b19565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166366b79f5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620007ca57600080fd5b505afa158015620007df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000805919062000b19565b60408051602080820186905281830184905282518083038401815260609092019092528051910120909150600090600086815260056020526040908190208290556001549051631ce7083f60e11b81523060048201529192506001600160a01b0316906339ce107e90602401600060405180830381600087803b1580156200088c57600080fd5b505af1158015620008a1573d6000803e3d6000fd5b5050506000918252506004602090815260408083208054600181018255908452828420018790558683526003909152902083905550505050565b828054620008e99062000b4e565b90600052602060002090601f0160209004810192826200090d576000855562000958565b82601f106200092857805160ff191683800117855562000958565b8280016001018555821562000958579182015b82811115620009585782518255916020019190600101906200093b565b50620009669291506200096a565b5090565b5b808211156200096657600081556001016200096b565b80516001600160a01b03811681146200099957600080fd5b919050565b600082601f830112620009b057600080fd5b81516001600160401b0380821115620009cd57620009cd62000bbf565b604051601f8301601f19908116603f01168101908282118183101715620009f857620009f862000bbf565b8160405283815260209250868385880101111562000a1557600080fd5b600091505b8382101562000a39578582018301518183018401529082019062000a1a565b8382111562000a4b5760008385830101525b9695505050505050565b60006020828403121562000a6857600080fd5b8151801515811462000a7957600080fd5b9392505050565b600080600080600060a0868803121562000a9957600080fd5b85516001600160401b038082111562000ab157600080fd5b62000abf89838a016200099e565b9650602088015191508082111562000ad657600080fd5b5062000ae5888289016200099e565b94505062000af66040870162000981565b92506060860151915062000b0d6080870162000981565b90509295509295909350565b60006020828403121562000b2c57600080fd5b5051919050565b6000821982111562000b495762000b4962000ba9565b500190565b600181811c9082168062000b6357607f821691505b6020821081141562000b8557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000ba25762000ba262000ba9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b612dfe8062000be56000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80637445b0d011610125578063be42152f116100ad578063f2fde38b1161007c578063f2fde38b14610461578063f50249fc14610474578063f6aacfb11461047c578063fcdb37101461049e578063fcea5096146104b157600080fd5b8063be42152f146103ff578063d71aaa4214610412578063dd62ed3e1461043b578063e0d1a3781461044e57600080fd5b806395d89b41116100f457806395d89b41146103b657806397879e0f146103be578063a457c2d7146103d1578063a9059cbb146103e4578063bd1b1afd146103f757600080fd5b80637445b0d0146103555780637785eebd146103755780637b0919b21461037e5780638da5cb5b1461039157600080fd5b80633aca7144116101a85780634f6e9e73116101775780634f6e9e731461030c57806359ad3fe01461031f578063691448c21461032757806370a082311461033a578063715018a61461034d57600080fd5b80633aca7144146102ca57806340490cc2146102d3578063409b223e146102e657806342b9e74f146102f957600080fd5b8063313ce567116101e4578063313ce5671461028057806332a7ef501461028f57806335c01fc3146102a457806339509351146102b757600080fd5b806306fdde0314610216578063095ea7b31461023457806318160ddd1461025757806323b872dd1461026d575b600080fd5b61021e6104c4565b60405161022b9190612bba565b60405180910390f35b610247610242366004612a04565b610556565b604051901515815260200161022b565b61025f610638565b60405190815260200161022b565b61024761027b3660046129c3565b6106ad565b6040516012815260200161022b565b6102a261029d366004612a04565b610700565b005b6102a26102b2366004612aca565b6108ce565b6102476102c5366004612a04565b610912565b61025f60065481565b61025f6102e1366004612966565b61091f565b61025f6102f436600461298a565b6109a2565b6102a2610307366004612b46565b610a7a565b6102a261031a366004612a30565b610a9e565b61025f610b03565b61025f61033536600461298a565b610b72565b61025f610348366004612966565b610c40565b6102a2610cbb565b61025f610363366004612aca565b60056020526000908152604090205481565b61025f60075481565b6102a261038c366004612aca565b610d2f565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161022b565b61021e610d6b565b61025f6103cc366004612966565b610d7a565b6102476103df366004612a04565b610df5565b6102476103f2366004612a04565b610e77565b61025f610e84565b6102a261040d366004612afc565b610ef3565b61039e610420366004612aca565b600b602052600090815260409020546001600160a01b031681565b61025f61044936600461298a565b61101d565b600a5461039e906001600160a01b031681565b6102a261046f366004612966565b6110eb565b61025f6111d5565b61024761048a366004612aca565b600090815260056020526040902054151590565b61025f6104ac36600461298a565b611244565b6102a26104bf366004612a95565b611312565b6060600880546104d390612d29565b80601f01602080910402602001604051908101604052809291908181526020018280546104ff90612d29565b801561054c5780601f106105215761010080835404028352916020019161054c565b820191906000526020600020905b81548152906001019060200180831161052f57829003601f168201915b5050505050905090565b600a5460408051635a61dbab60e11b815290516000926001600160a01b03169163b4c3b756916004808301926020929190829003018186803b15801561059b57600080fd5b505afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190612a78565b6106245760405162461bcd60e51b815260206004820152601e60248201527f4d7573742062652073696e676c6520626c6f636b636861696e2063616c6c000060448201526064015b60405180910390fd5b61062f3384846113e8565b50600192915050565b600080805b60075481101561067057610652600482611631565b61065c9083612cfa565b91508061066881612d5e565b91505061063d565b5060005b6007548110156106a757610689600582611631565b6106939083612d12565b91508061069f81612d5e565b915050610674565b50919050565b60006106ba848484611681565b3360006106c78683610b72565b9050838110156106e95760405162461bcd60e51b815260040161061b90612c0f565b6106f48683866117ad565b50600195945050505050565b600a60009054906101000a90046001600160a01b03166001600160a01b031663b4c3b7566040518163ffffffff1660e01b815260040160206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107869190612a78565b156107d35760405162461bcd60e51b815260206004820152601f60248201527f4d7573742062652070617274206f662063726f7373636861696e2063616c6c00604482015260640161061b565b600a54604080516311d5f13b60e31b8152815160009384936001600160a01b0390911692638eaf89d89260048083019392829003018186803b15801561081857600080fd5b505afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108509190612b21565b6000828152600b602052604090205491935091506001600160a01b038083169116146108be5760405162461bcd60e51b815260206004820152601b60248201527f536f75726365206973206e6f7420636f72726563742045524332300000000000604482015260640161061b565b6108c88484611904565b50505050565b6000546001600160a01b031633146108f85760405162461bcd60e51b815260040161061b90612c57565b806007600082825461090a9190612cfa565b909155505050565b600061062f3384846119b3565b60006001600160a01b03821681805b6006548110156109625761094460008483611b0a565b61094e9083612cfa565b91508061095a81612d5e565b91505061092e565b5060005b60065481101561099a5761097c60018483611b5c565b6109869083612d12565b91508061099281612d5e565b915050610966565b509392505050565b60006001600160a01b0383166109ca5760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b0382166109f05760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b600654811015610a3757610a196002858584611b99565b610a239083612cfa565b915080610a2f81612d5e565b915050610a02565b5060005b600654811015610a7057610a526003858584611be7565b610a5c9083612d12565b915080610a6881612d5e565b915050610a3b565b5095945050505050565b600a5433906001600160a01b0316811415610a925750325b6108c884828585611c3b565b600a5433906001600160a01b0316811415610ab65750325b610ac284868585611c3b565b6000610ace8683610b72565b905082811015610af05760405162461bcd60e51b815260040161061b90612c0f565b610afb8683856117ad565b505050505050565b600080805b600754811015610b3b57610b1d600482611631565b610b279083612cfa565b915080610b3381612d5e565b915050610b08565b5060005b6007548110156106a757610b54600582611e3b565b610b5e9083612d12565b915080610b6a81612d5e565b915050610b3f565b60006001600160a01b038316610b9a5760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b038216610bc05760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b600654811015610c0757610be96002858584611be7565b610bf39083612cfa565b915080610bff81612d5e565b915050610bd2565b5060005b600654811015610a7057610c226003858584611b99565b610c2c9083612d12565b915080610c3881612d5e565b915050610c0b565b60006001600160a01b03821681805b600654811015610c8357610c6560008483611b0a565b610c6f9083612cfa565b915080610c7b81612d5e565b915050610c4f565b5060005b60065481101561099a57610c9d60018483611b0a565b610ca79083612d12565b915080610cb381612d5e565b915050610c87565b6000546001600160a01b03163314610ce55760405162461bcd60e51b815260040161061b90612c57565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610d595760405162461bcd60e51b815260040161061b90612c57565b806006600082825461090a9190612cfa565b6060600980546104d390612d29565b60006001600160a01b03821681805b600654811015610dbd57610d9f60008483611b5c565b610da99083612cfa565b915080610db581612d5e565b915050610d89565b5060005b60065481101561099a57610dd760018483611b5c565b610de19083612d12565b915080610ded81612d5e565b915050610dc1565b600080610e023385610b72565b905082811015610e625760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161061b565b610e6d3385856117ad565b5060019392505050565b600061062f338484611681565b600080805b600754811015610ebc57610e9e600482611e3b565b610ea89083612cfa565b915080610eb481612d5e565b915050610e89565b5060005b6007548110156106a757610ed5600582611e3b565b610edf9083612d12565b915080610eeb81612d5e565b915050610ec0565b6000546001600160a01b03163314610f1d5760405162461bcd60e51b815260040161061b90612c57565b600a60009054906101000a90046001600160a01b03166001600160a01b031663b4c3b7566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190612a78565b610fef5760405162461bcd60e51b815260206004820152601e60248201527f4d7573742062652073696e676c6520626c6f636b636861696e2063616c6c0000604482015260640161061b565b6000918252600b602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b0383166110455760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b03821661106b5760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b6006548110156110b2576110946002858584611be7565b61109e9083612cfa565b9150806110aa81612d5e565b91505061107d565b5060005b600654811015610a70576110cd6003858584611be7565b6110d79083612d12565b9150806110e381612d5e565b9150506110b6565b6000546001600160a01b031633146111155760405162461bcd60e51b815260040161061b90612c57565b6001600160a01b03811661117a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161061b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080805b60075481101561120d576111ef600482611e3b565b6111f99083612cfa565b91508061120581612d5e565b9150506111da565b5060005b6007548110156106a757611226600582611631565b6112309083612d12565b91508061123c81612d5e565b915050611211565b60006001600160a01b03831661126c5760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b0382166112925760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b6006548110156112d9576112bb6002858584611b99565b6112c59083612cfa565b9150806112d181612d5e565b9150506112a4565b5060005b600654811015610a70576112f46003858584611b99565b6112fe9083612d12565b91508061130a81612d5e565b9150506112dd565b6040805160208082018590528183018490528251808303840181526060909201909252805191012060005b6000828152600460205260409020548110156113d057600082815260046020526040812080548390811061137357611373612d8f565b9060005260206000200154905085156113a2576000818152600360209081526040808320546002909252909120555b60009081526003602090815260408083208390556005909152812055806113c881612d5e565b91505061133d565b5060008181526004602052604081206108c89161292c565b6001600160a01b03831661140e5760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b0382166114345760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b6006548110156114d55761145d6002858584611e7e565b156114aa5760405162461bcd60e51b815260206004820152601e60248201527f496e63726561736520616c6c6f77616e636520736c6f74206c6f636b65640000604482015260640161061b565b6114b76002858584611ed4565b6114c19083612cfa565b9150806114cd81612d5e565b915050611446565b5060005b600654811015611568576114f06003858584611e7e565b1561153d5760405162461bcd60e51b815260206004820152601e60248201527f446563726561736520616c6c6f77616e636520736c6f74206c6f636b65640000604482015260640161061b565b61154a6003858584611ed4565b6115549083612d12565b91508061156081612d5e565b9150506114d9565b50838110156115ac576000611581600285856000611ed4565b90506115a6600285856000866115978b88612cfa565b6115a19190612d12565b611f18565b506115dc565b838111156115dc5760006115c4600385856000611ed4565b90506115da600385856000896115978888612cfa565b505b846001600160a01b0316866001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258660405161162191815260200190565b60405180910390a3505050505050565b6000808383604051602001611650929190918252602082015260400190565b60408051601f198184030181529181528151602092830120600081815260029093529120549091505b949350505050565b6001600160a01b0383166116e55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161061b565b6001600160a01b0382166117475760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161061b565b6117518382611f5a565b61175b82826120f9565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117a091815260200190565b60405180910390a3505050565b6001600160a01b0383166117d35760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b0382166117f95760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b600654811015611865576118226003858584611e7e565b611853576001915060006118396003868685611ed4565b905061184d60038686856115a18b87612cfa565b50611865565b8061185d81612d5e565b91505061180b565b50806118bf5760405162461bcd60e51b815260206004820152602360248201527f416c6c20646563726561736520616c6c6f77616e636520736c6f747320696e2060448201526275736560e81b606482015260840161061b565b846001600160a01b0316866001600160a01b03167fca00ac413b8c2013d4efc4a5ea887318bf432aa5d2a4c8ec87ad5660c28ef5d88660405161162191815260200190565b6001600160a01b03821661195a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161061b565b6119638161221d565b61196d82826120f9565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b0383166119d95760405162461bcd60e51b815260040161061b90612c8c565b6001600160a01b0382166119ff5760405162461bcd60e51b815260040161061b90612bcd565b6001600160a01b038084169083166000805b600654811015611a6b57611a286002858584611e7e565b611a5957600191506000611a3f6002868685611ed4565b9050611a5360028686856115a18b87612cfa565b50611a6b565b80611a6381612d5e565b915050611a11565b5080611ac55760405162461bcd60e51b815260206004820152602360248201527f416c6c20696e63726561736520616c6c6f77616e636520736c6f747320696e2060448201526275736560e81b606482015260840161061b565b846001600160a01b0316866001600160a01b03167fae0962182a7df59bce5a3518382b8a4a909b354b6ba0f4114215654490399b4b8660405161162191815260200190565b604080516020810185905290810183905260608101829052600090819060800160408051601f198184030181529181528151602092830120600081815260029093529120549091505b95945050505050565b60408051602080820186905281830185905260608083018590528351808403909101815260809092019092528051910120600090611b53816122db565b6040805160208082018790528183018690526060820185905260808083018590528351808403909101815260a09092019092528051910120600090611bdd816122db565b9695505050505050565b60408051602081018690529081018490526060810183905260808101829052600090819060a00160408051601f19818403018152918152815160209283012060008181526002909352912054909150611bdd565b600a60009054906101000a90046001600160a01b03166001600160a01b031663b4c3b7566040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8957600080fd5b505afa158015611c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc19190612a78565b15611d0e5760405162461bcd60e51b815260206004820152601f60248201527f4d7573742062652070617274206f662063726f7373636861696e2063616c6c00604482015260640161061b565b611d188382612315565b6000848152600b60205260409020546001600160a01b031680611d905760405162461bcd60e51b815260206004820152602a60248201527f4e6f20455243203230207265676973746572656420666f722072656d6f746520604482015269313637b1b5b1b430b4b760b11b606482015260840161061b565b600154604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b031663032a7ef560e41b17905291516392b2c33560e01b815291909216916392b2c33591611e02918991869190600401612cd0565b600060405180830381600087803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b505050505050505050565b6000808383604051602001611e5a929190918252602082015260400190565b6040516020818303038152906040528051906020012090506116798160001c6122db565b60408051602081018690529081018490526060810183905260808101829052600090819060a00160408051601f198184030181529181528151602092830120600081815260059093529120549091501515611bdd565b6040805160208082018790528183018690526060820185905260808083018590528351808403909101815260a09092019092528051910120600090611bdd816123c6565b6040805160208082018890528183018790526060820186905260808083018690528351808403909101815260a09092019092528051910120610afb8183612422565b6001600160a01b038216611fba5760405162461bcd60e51b815260206004820152602160248201527f45524332303a2046726f6d206163636f756e743a207a65726f206164647265736044820152607360f81b606482015260840161061b565b6000611fc58361091f565b9050818110156120305760405162461bcd60e51b815260206004820152603060248201527f45524332303a20616d6f756e742065786365656473206d696e2062616c616e6360448201526f329037b310232927a69039b2b73232b960811b606482015260840161061b565b6001600160a01b0383166000805b60065481101561209a57612054600184836126ed565b6120885760019150600061206a6001858461273c565b90506120826001858461207d8a86612cfa565b612779565b5061209a565b8061209281612d5e565b91505061203e565b50806120f25760405162461bcd60e51b815260206004820152602160248201527f416c6c2064656372656173652062616c616e636520736c6f747320696e2075736044820152606560f81b606482015260840161061b565b5050505050565b6001600160a01b0382166121605760405162461bcd60e51b815260206004820152602860248201527f45524332303a20726563697069656e74206163636f756e74206973207a65726f604482015267206164647265737360c01b606482015260840161061b565b6001600160a01b0382166000805b6006548110156121c557612184600084836126ed565b6121b35760019150600061219a6000858461273c565b90506121ad6000858461207d8986612cfa565b506121c5565b806121bd81612d5e565b91505061216e565b50806108c85760405162461bcd60e51b815260206004820152602160248201527f416c6c20696e6372656173652062616c616e636520736c6f747320696e2075736044820152606560f81b606482015260840161061b565b6000805b60075481101561227a576122366004826127b4565b6122685760019150600061224b600483612802565b905061226260048361225d8785612cfa565b612845565b5061227a565b8061227281612d5e565b915050612221565b50806122d75760405162461bcd60e51b815260206004820152602660248201527f416c6c20696e63726561736520746f74616c20737570706c7920736c6f747320604482015265696e2075736560d01b606482015260840161061b565b5050565b60008181526005602052604081205415612302575060009081526003602052604090205490565b5060009081526002602052604090205490565b6001600160a01b0382166123755760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161061b565b61237e81612877565b6123888282611f5a565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016119a7565b600081815260056020526040812054156123025760405162461bcd60e51b815260206004820152601f60248201527f52656164207768696c6520636f6e7472616374206974656d206c6f636b656400604482015260640161061b565b600082815260056020526040902054156124755760405162461bcd60e51b815260206004820152601460248201527310dbdb9d1c9858dd081a5d195b481b1bd8dad95960621b604482015260640161061b565b600160009054906101000a90046001600160a01b03166001600160a01b031663b4c3b7566040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c357600080fd5b505afa1580156124d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fb9190612a78565b156125125760009182526002602052604090912055565b6001546040805163336d5b0960e01b815290516000926001600160a01b03169163336d5b09916004808301926020929190829003018186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f9190612ae3565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166366b79f5a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125e157600080fd5b505afa1580156125f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126199190612ae3565b60408051602080820186905281830184905282518083038401815260609092019092528051910120909150600090600086815260056020526040908190208290556001549051631ce7083f60e11b81523060048201529192506001600160a01b0316906339ce107e90602401600060405180830381600087803b15801561269f57600080fd5b505af11580156126b3573d6000803e3d6000fd5b5050506000918252506004602090815260408083208054600181018255908452828420018790558683526003909152902083905550505050565b604080516020810185905290810183905260608101829052600090819060800160408051601f198184030181529181528151602092830120600081815260059093529120549091501515611b53565b60408051602080820186905281830185905260608083018590528351808403909101815260809092019092528051910120600090611b53816123c6565b604080516020808201879052818301869052606080830186905283518084039091018152608090920190925280519101206120f28183612422565b60008083836040516020016127d3929190918252602082015260400190565b60408051601f198184030181529181528151602092830120600081815260059093529120549091501515611679565b6000808383604051602001612821929190918252602082015260400190565b6040516020818303038152906040528051906020012090506116798160001c6123c6565b604080516020808201869052818301859052825180830384018152606090920190925280519101206108c88183612422565b6000805b6007548110156128cf576128906005826127b4565b6128bd576001915060006128a5600583612802565b90506128b760058361225d8785612cfa565b506128cf565b806128c781612d5e565b91505061287b565b50806122d75760405162461bcd60e51b815260206004820152602660248201527f416c6c20646563726561736520746f74616c20737570706c7920736c6f747320604482015265696e2075736560d01b606482015260840161061b565b508054600082559060005260206000209081019061294a919061294d565b50565b5b80821115612962576000815560010161294e565b5090565b60006020828403121561297857600080fd5b813561298381612da5565b9392505050565b6000806040838503121561299d57600080fd5b82356129a881612da5565b915060208301356129b881612da5565b809150509250929050565b6000806000606084860312156129d857600080fd5b83356129e381612da5565b925060208401356129f381612da5565b929592945050506040919091013590565b60008060408385031215612a1757600080fd5b8235612a2281612da5565b946020939093013593505050565b60008060008060808587031215612a4657600080fd5b8435612a5181612da5565b9350602085013592506040850135612a6881612da5565b9396929550929360600135925050565b600060208284031215612a8a57600080fd5b815161298381612dba565b600080600060608486031215612aaa57600080fd5b8335612ab581612dba565b95602085013595506040909401359392505050565b600060208284031215612adc57600080fd5b5035919050565b600060208284031215612af557600080fd5b5051919050565b60008060408385031215612b0f57600080fd5b8235915060208301356129b881612da5565b60008060408385031215612b3457600080fd5b8251915060208301516129b881612da5565b600080600060608486031215612b5b57600080fd5b8335925060208401356129f381612da5565b6000815180845260005b81811015612b9357602081850181015186830182015201612b77565b81811115612ba5576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006129836020830184612b6d565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b8381526001600160a01b0383166020820152606060408201819052600090611b5390830184612b6d565b60008219821115612d0d57612d0d612d79565b500190565b600082821015612d2457612d24612d79565b500390565b600181811c90821680612d3d57607f821691505b602082108114156106a757634e487b7160e01b600052602260045260246000fd5b6000600019821415612d7257612d72612d79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461294a57600080fd5b801515811461294a57600080fdfea2646970667358221220aa8fdb8cd19dbc0d05e535d1022c5fb9267cff9b0fe24681af166d449017ba8964736f6c63430008050033";

    public static final String FUNC_ACCOUNTPALLELIZATIONFACTOR = "accountPallelizationFactor";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_ALLOWANCEMAX = "allowanceMax";

    public static final String FUNC_ALLOWANCEMIN = "allowanceMin";

    public static final String FUNC_ALLOWANCEPROVISIONAL = "allowanceProvisional";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFMIN = "balanceOfMin";

    public static final String FUNC_BALANCEOFPROVISIONAL = "balanceOfProvisional";

    public static final String FUNC_CBC = "cbc";

    public static final String FUNC_CROSSCHAINRECEIVER = "crosschainReceiver";

    public static final String FUNC_CROSSCHAINTRANSFER = "crosschainTransfer";

    public static final String FUNC_CROSSCHAINTRANSFERFROM = "crosschainTransferFrom";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_ERC20PALLELIZATIONFACTOR = "erc20PallelizationFactor";

    public static final String FUNC_FINALISE = "finalise";

    public static final String FUNC_INCREASEACCOUNTPARALLELIZARTIONFACTOR = "increaseAccountParallelizartionFactor";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_INCREASEERC20PARALLELIZARTIONFACTOR = "increaseERC20ParallelizartionFactor";

    public static final String FUNC_ISLOCKED = "isLocked";

    public static final String FUNC_LOCKEDBYROOTBLOCKCHAINIDTRANSACTIONID = "lockedByRootBlockchainIdTransactionId";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REMOTEERC20S = "remoteERC20s";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETREMOTEERC20 = "setRemoteERC20";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALSUPPLYMAX = "totalSupplyMax";

    public static final String FUNC_TOTALSUPPLYMIN = "totalSupplyMin";

    public static final String FUNC_TOTALSUPPLYPROVISIONAL = "totalSupplyProvisional";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVALDECREASE_EVENT = new Event("ApprovalDecrease", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVALINCREASE_EVENT = new Event("ApprovalIncrease", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected CrosschainERC20PresetFixedSupply(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrosschainERC20PresetFixedSupply(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrosschainERC20PresetFixedSupply(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrosschainERC20PresetFixedSupply(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalDecreaseEventResponse> getApprovalDecreaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALDECREASE_EVENT, transactionReceipt);
        ArrayList<ApprovalDecreaseEventResponse> responses = new ArrayList<ApprovalDecreaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalDecreaseEventResponse typedResponse = new ApprovalDecreaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalDecreaseEventResponse> approvalDecreaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalDecreaseEventResponse>() {
            @Override
            public ApprovalDecreaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALDECREASE_EVENT, log);
                ApprovalDecreaseEventResponse typedResponse = new ApprovalDecreaseEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalDecreaseEventResponse> approvalDecreaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALDECREASE_EVENT));
        return approvalDecreaseEventFlowable(filter);
    }

    public List<ApprovalIncreaseEventResponse> getApprovalIncreaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALINCREASE_EVENT, transactionReceipt);
        ArrayList<ApprovalIncreaseEventResponse> responses = new ArrayList<ApprovalIncreaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalIncreaseEventResponse typedResponse = new ApprovalIncreaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalIncreaseEventResponse> approvalIncreaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalIncreaseEventResponse>() {
            @Override
            public ApprovalIncreaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALINCREASE_EVENT, log);
                ApprovalIncreaseEventResponse typedResponse = new ApprovalIncreaseEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalIncreaseEventResponse> approvalIncreaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALINCREASE_EVENT));
        return approvalIncreaseEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> accountPallelizationFactor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCOUNTPALLELIZATIONFACTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_accountPallelizationFactor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCOUNTPALLELIZATIONFACTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_allowance(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> allowanceMax(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCEMAX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_allowanceMax(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ALLOWANCEMAX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> allowanceMin(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCEMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_allowanceMin(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ALLOWANCEMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> allowanceProvisional(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCEPROVISIONAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_allowanceProvisional(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ALLOWANCEPROVISIONAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOfMin(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_balanceOfMin(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOFMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOfProvisional(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFPROVISIONAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_balanceOfProvisional(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOFPROVISIONAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> cbc() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CBC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_cbc() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CBC, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crosschainReceiver(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSCHAINRECEIVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crosschainReceiver(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSCHAINRECEIVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crosschainTransfer(BigInteger blockchainId, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSCHAINTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockchainId), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crosschainTransfer(BigInteger blockchainId, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSCHAINTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockchainId), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crosschainTransferFrom(String sender, BigInteger recipientBlockchainId, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSCHAINTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.generated.Uint256(recipientBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crosschainTransferFrom(String sender, BigInteger recipientBlockchainId, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSCHAINTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.generated.Uint256(recipientBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_decreaseAllowance(String spender, BigInteger subtractedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> erc20PallelizationFactor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ERC20PALLELIZATIONFACTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_erc20PallelizationFactor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ERC20PALLELIZATIONFACTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalise(Boolean _commit, BigInteger _rootBcId, BigInteger _crossTxId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALISE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_commit), 
                new org.web3j.abi.datatypes.generated.Uint256(_rootBcId), 
                new org.web3j.abi.datatypes.generated.Uint256(_crossTxId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_finalise(Boolean _commit, BigInteger _rootBcId, BigInteger _crossTxId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALISE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_commit), 
                new org.web3j.abi.datatypes.generated.Uint256(_rootBcId), 
                new org.web3j.abi.datatypes.generated.Uint256(_crossTxId)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAccountParallelizartionFactor(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEACCOUNTPARALLELIZARTIONFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_increaseAccountParallelizartionFactor(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEACCOUNTPARALLELIZARTIONFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_increaseAllowance(String spender, BigInteger addedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseERC20ParallelizartionFactor(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEERC20PARALLELIZARTIONFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_increaseERC20ParallelizartionFactor(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEERC20PARALLELIZARTIONFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> isLocked(BigInteger _key) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISLOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_isLocked(BigInteger _key) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISLOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_key)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<byte[]> lockedByRootBlockchainIdTransactionId(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOCKEDBYROOTBLOCKCHAINIDTRANSACTIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public String getRLP_lockedByRootBlockchainIdTransactionId(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCKEDBYROOTBLOCKCHAINIDTRANSACTIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NAME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> remoteERC20s(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REMOTEERC20S, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_remoteERC20s(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOTEERC20S, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRemoteERC20(BigInteger blockchainId, String erc20) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREMOTEERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockchainId), 
                new org.web3j.abi.datatypes.Address(160, erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_setRemoteERC20(BigInteger blockchainId, String erc20) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREMOTEERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockchainId), 
                new org.web3j.abi.datatypes.Address(160, erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> totalSupplyMax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLYMAX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_totalSupplyMax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLYMAX, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> totalSupplyMin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLYMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_totalSupplyMin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLYMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> totalSupplyProvisional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLYPROVISIONAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_totalSupplyProvisional() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLYPROVISIONAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_transfer(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_transferFrom(String sender, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    @Deprecated
    public static CrosschainERC20PresetFixedSupply load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainERC20PresetFixedSupply(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrosschainERC20PresetFixedSupply load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainERC20PresetFixedSupply(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrosschainERC20PresetFixedSupply load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrosschainERC20PresetFixedSupply(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrosschainERC20PresetFixedSupply load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrosschainERC20PresetFixedSupply(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrosschainERC20PresetFixedSupply> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _name, String _symbol, String _cbc, BigInteger _initialSupply, String _owner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.Address(160, _cbc), 
                new org.web3j.abi.datatypes.generated.Uint256(_initialSupply), 
                new org.web3j.abi.datatypes.Address(160, _owner)));
        return deployRemoteCall(CrosschainERC20PresetFixedSupply.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CrosschainERC20PresetFixedSupply> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _name, String _symbol, String _cbc, BigInteger _initialSupply, String _owner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.Address(160, _cbc), 
                new org.web3j.abi.datatypes.generated.Uint256(_initialSupply), 
                new org.web3j.abi.datatypes.Address(160, _owner)));
        return deployRemoteCall(CrosschainERC20PresetFixedSupply.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainERC20PresetFixedSupply> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, String _cbc, BigInteger _initialSupply, String _owner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.Address(160, _cbc), 
                new org.web3j.abi.datatypes.generated.Uint256(_initialSupply), 
                new org.web3j.abi.datatypes.Address(160, _owner)));
        return deployRemoteCall(CrosschainERC20PresetFixedSupply.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainERC20PresetFixedSupply> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, String _cbc, BigInteger _initialSupply, String _owner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.Address(160, _cbc), 
                new org.web3j.abi.datatypes.generated.Uint256(_initialSupply), 
                new org.web3j.abi.datatypes.Address(160, _owner)));
        return deployRemoteCall(CrosschainERC20PresetFixedSupply.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class ApprovalDecreaseEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class ApprovalIncreaseEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
